import{F as h,R as w}from"./chunk-constants.js";import{_ as C,j as P,r as d,o as x,c as E,b as p,w as f,h as v}from"./entry-chunk-index.js";const O=Object.create(String);Object.assign(O,{toFirstUpperCase(e=""){return`${(e[0]??"").toUpperCase()}${e.slice(1)}`},toFirstLowerCase(e=""){return`${(e[0]??"").toLowerCase()}${e.slice(1)}`},toCamelCase(e,{separator:t="-",first:r="raw"}={}){const n=new RegExp(`${t}(\\w)`,"g"),s=e.replaceAll(n,(o,l)=>l.toUpperCase());return[!0,"uppercase"].includes(r)?O.toFirstUpperCase(s):[!1,"lowercase"].includes(r)?O.toFirstLowerCase(s):s},toLineCase(e="",{separator:t="-"}={}){return e.replaceAll(/([a-z])([A-Z])/g,`$1${t}$2`).toLowerCase()}});const a={SIMPLE_TYPES:[null,void 0,Number,String,Boolean,BigInt,Symbol],getExactType(e){if([null,void 0].includes(e))return e;const t=Object.getPrototypeOf(e);return t===null||!("constructor"in t)?Object:t.constructor},getExactTypes(e){if([null,void 0].includes(e))return[e];let t=[],r=0,n=!1,s=Object.getPrototypeOf(e);for(;;){if(s===null){(r<=0||n)&&t.push(Object);break}"constructor"in s?t.push(s.constructor):(t.push(Object),n=!0),s=Object.getPrototypeOf(s),r++}return t},deepClone(e){if(e instanceof Array){let t=[];for(const r of e.values())t.push(this.deepClone(r));return t}if(e instanceof Set){let t=new Set;for(let r of e.values())t.add(this.deepClone(r));return t}if(e instanceof Map){let t=new Map;for(let[r,n]of e.entries())t.set(r,this.deepClone(n));return t}if(a.getExactType(e)===Object){let t={};for(const[r,n]of Object.entries(Object.getOwnPropertyDescriptors(e)))"value"in n?Object.defineProperty(t,r,{...n,value:this.deepClone(n.value)}):Object.defineProperty(t,r,n);return t}return e},deepUnwrap(e,{isWrap:t=h,unwrap:r=w}={}){const n={isWrap:t,unwrap:r};return t(e)?a.deepUnwrap(r(e),n):e instanceof Array?e.map(s=>a.deepUnwrap(s,n)):a.getExactType(e)===Object?Object.fromEntries(Object.entries(e).map(([s,o])=>[s,a.deepUnwrap(o,n)])):e}},k=Object.create(Date);Object.assign(k,{create(...e){if(arguments.length===1){const t=arguments[0],r=a.getExactType(t)===String?t.replaceAll("-","/"):t;return new Date(r)}else return arguments.length===0?new Date:new Date(...arguments)}});const M=Object.create(Math);Object.assign(M,{arcsin:Math.asin,arccos:Math.acos,arctan:Math.atan,arsinh:Math.asinh,arcosh:Math.acosh,artanh:Math.atanh,loge:Math.log,ln:Math.log,lg:Math.log10,log(e,t){return Math.log(t)/Math.log(e)}});const y=Object.create(Reflect);Object.assign(y,{ownValues(e){return Reflect.ownKeys(e).map(t=>e[t])},ownEntries(e){return Reflect.ownKeys(e).map(t=>[t,e[t]])}});const m=Object.create(Set);Object.assign(m,{add(e,...t){for(const r of t)e.add(r)}});function _(e=[],{separator:t=","}={}){if(e instanceof Array)return e.map(n=>_(n)).flat();const r=a.getExactType(e);return r===String?e.split(t).map(n=>n.trim()).filter(n=>n):r===Symbol?[e]:[]}const S=Object.create(Object);Object.assign(S,{assign(e={},...t){for(const r of t)for(const[n,s]of Object.entries(Object.getOwnPropertyDescriptors(r)))Object.defineProperty(e,n,s);return e},deepAssign(e={},...t){for(const r of t)for(const[n,s]of Object.entries(Object.getOwnPropertyDescriptors(r)))"value"in s&&a.getExactType(s.value)===Object?Object.defineProperty(e,n,{...s,value:this.deepAssign(e[n],s.value)}):Object.defineProperty(e,n,s);return e},owner(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e;let r=Object.getPrototypeOf(e);return r===null?null:this.owner(r,t)},descriptor(e,t){const r=this.owner(e,t);if(!!r)return Object.getOwnPropertyDescriptor(r,t)},keys(e,{symbol:t=!1,notEnumerable:r=!1,extend:n=!1}={}){const s={symbol:t,notEnumerable:r,extend:n};let o=new Set;const l=Object.getOwnPropertyDescriptors(e);for(const[c,i]of y.ownEntries(l))!t&&a.getExactType(c)===Symbol||!r&&!i.enumerable||o.add(c);if(n){const c=Object.getPrototypeOf(e);if(c!==null){const i=this.keys(c,s);m.add(o,...i)}}return Array.from(o)},descriptors(e,{symbol:t=!1,notEnumerable:r=!1,extend:n=!1}={}){const s={symbol:t,notEnumerable:r,extend:n};return this.keys(e,s).map(l=>this.descriptor(e,l))},descriptorEntries(e,{symbol:t=!1,notEnumerable:r=!1,extend:n=!1}={}){const s={symbol:t,notEnumerable:r,extend:n};return this.keys(e,s).map(l=>[l,this.descriptor(e,l)])},filter(e,{pick:t=[],omit:r=[],emptyPick:n="all",separator:s=",",symbol:o=!0,notEnumerable:l=!1,extend:c=!0}={}){let i={};t=_(t,{separator:s}),r=_(r,{separator:s});let u=[];u=t.length>0||n==="empty"?t:this.keys(e,{symbol:o,notEnumerable:l,extend:c}),u=u.filter(b=>!r.includes(b));for(const b of u){const j=this.descriptor(e,b);Object.defineProperty(i,b,j)}return i},pick(e,t=[],r={}){return this.filter(e,{pick:t,emptyPick:"empty",...r})},omit(e,t=[],r={}){return this.filter(e,{omit:t,...r})}});const g=Object.create(Proxy);Object.assign(g,{bindThis(e,t={}){return new Proxy(e,{get(r,n,s){const o=Reflect.get(...arguments);return o instanceof Function?o.bind(r):o}})}});const T={class:"Form-root"},A={name:"Form"},D=Object.assign(A,{setup(e){const t=P(g.bindThis({model:{username:"",password:""},rules:{},submit(){console.log("submit",this.model)}}));return(r,n)=>{const s=d("el-input"),o=d("el-form-item"),l=d("el-button"),c=d("el-form"),i=d("el-card");return x(),E("div",T,[p(i,null,{default:f(()=>[p(c,{"label-width":100},{default:f(()=>[p(o,{label:"username"},{default:f(()=>[p(s,{modelValue:t.model.username,"onUpdate:modelValue":n[0]||(n[0]=u=>t.model.username=u),type:"new-text"},null,8,["modelValue"])]),_:1}),p(o,{label:"password"},{default:f(()=>[p(s,{modelValue:t.model.password,"onUpdate:modelValue":n[1]||(n[1]=u=>t.model.password=u),type:"new-password"},null,8,["modelValue"])]),_:1}),p(o,null,{default:f(()=>[p(l,{type:"primary",onClick:t.submit},{default:f(()=>[v("提交")]),_:1},8,["onClick"])]),_:1})]),_:1})]),_:1})])}}}),B=C(D,[["__scopeId","data-v-8e021230"]]);export{B as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmstRm9ybS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jhc2UvX1N0cmluZy5qcyIsIi4uLy4uLy4uLy4uL3NyYy9iYXNlL0RhdGEuanMiLCIuLi8uLi8uLi8uLi9zcmMvYmFzZS9fRGF0ZS5qcyIsIi4uLy4uLy4uLy4uL3NyYy9iYXNlL19NYXRoLmpzIiwiLi4vLi4vLi4vLi4vc3JjL2Jhc2UvX1JlZmxlY3QuanMiLCIuLi8uLi8uLi8uLi9zcmMvYmFzZS9fU2V0LmpzIiwiLi4vLi4vLi4vLi4vc3JjL2Jhc2UvX09iamVjdC5qcyIsIi4uLy4uLy4uLy4uL3NyYy9iYXNlL19Qcm94eS5qcyIsIi4uLy4uL3NyYy92aWV3cy9Gb3JtLnZ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgX1N0cmluZyA9IE9iamVjdC5jcmVhdGUoU3RyaW5nKTtcbk9iamVjdC5hc3NpZ24oX1N0cmluZywge1xuICAvKipcbiAgICAgKiDpppblrZfmr43lpKflhplcbiAgICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gIHRvRmlyc3RVcHBlckNhc2UobmFtZSA9ICcnKSB7XG4gICAgcmV0dXJuIGAkeyhuYW1lWzBdID8/ICcnKS50b1VwcGVyQ2FzZSgpfSR7bmFtZS5zbGljZSgxKX1gO1xuICB9LFxuICAvKipcbiAgICAgKiDpppblrZfmr43lsI/lhplcbiAgICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSDlkI3np7BcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICB0b0ZpcnN0TG93ZXJDYXNlKG5hbWUgPSAnJykge1xuICAgIHJldHVybiBgJHsobmFtZVswXSA/PyAnJykudG9Mb3dlckNhc2UoKX0ke25hbWUuc2xpY2UoMSl9YDtcbiAgfSxcbiAgLyoqXG4gICAqIOi9rOmpvOWzsOWRveWQjeOAguW4uOeUqOS6jui/nuaOpeespuWRveWQjei9rOmpvOWzsOWRveWQje+8jOWmgiB4eC1uYW1lIC0+IHh4TmFtZVxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSDlkI3np7BcbiAgICogQHBhcmFtIHNlcGFyYXRvciB7c3RyaW5nfSDov57mjqXnrKbjgILnlKjkuo7nlJ/miJDmraPliJkg6buY6K6k5Li65Lit5YiS57q/IC0g5a+55bqUcmVnZXhw5b6X5YiwIC8tKFxcdykvZ1xuICAgKiBAcGFyYW0gZmlyc3Qge3N0cmluZyxib29sZWFufSDpppblrZfmr43lpITnkIbmlrnlvI/jgIJ0cnVlIOaIliAndXBwZXJjYXNlJ++8mui9rOaNouaIkOWkp+WGmTtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlIOaIliAnbG93ZXJjYXNlJ++8mui9rOaNouaIkOWwj+WGmTtcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyYXcnIOaIliDlhbbku5bml6DmlYjlgLzvvJrpu5jorqTljp/moLfov5Tlm57vvIzkuI3ov5vooYzlpITnkIY7XG4gICAqIEByZXR1cm5zIHtNYWdpY1N0cmluZ3xzdHJpbmd8c3RyaW5nfVxuICAgKi9cbiAgdG9DYW1lbENhc2UobmFtZSwgeyBzZXBhcmF0b3IgPSAnLScsIGZpcnN0ID0gJ3JhdycgfSA9IHt9KSB7XG4gICAgLy8g55Sf5oiQ5q2j5YiZXG4gICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChgJHtzZXBhcmF0b3J9KFxcXFx3KWAsICdnJyk7XG4gICAgLy8g5ou85o6l5oiQ6am85bOwXG4gICAgY29uc3QgY2FtZWxOYW1lID0gbmFtZS5yZXBsYWNlQWxsKHJlZ2V4cCwgKHN1YnN0ciwgJDEpID0+IHtcbiAgICAgIHJldHVybiAkMS50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuICAgICAgLy8g6aaW5a2X5q+N5aSn5bCP5YaZ5qC55o2u5Lyg5Y+C5Yik5patXG4gICAgaWYgKFt0cnVlLCAndXBwZXJjYXNlJ10uaW5jbHVkZXMoZmlyc3QpKSB7XG4gICAgICByZXR1cm4gX1N0cmluZy50b0ZpcnN0VXBwZXJDYXNlKGNhbWVsTmFtZSk7XG4gICAgfVxuICAgIGlmIChbZmFsc2UsICdsb3dlcmNhc2UnXS5pbmNsdWRlcyhmaXJzdCkpIHtcbiAgICAgIHJldHVybiBfU3RyaW5nLnRvRmlyc3RMb3dlckNhc2UoY2FtZWxOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbWVsTmFtZTtcbiAgfSxcbiAgLyoqXG4gICAqIOi9rOi/nuaOpeespuWRveWQjeOAguW4uOeUqOS6jumpvOWzsOWRveWQjei9rOi/nuaOpeespuWRveWQje+8jOWmgiB4eE5hbWUgLT4geHgtbmFtZVxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSDlkI3np7BcbiAgICogQHBhcmFtIHNlcGFyYXRvciB7c3RyaW5nfSDov57mjqXnrKZcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRvTGluZUNhc2UobmFtZSA9ICcnLCB7IHNlcGFyYXRvciA9ICctJyB9ID0ge30pIHtcbiAgICByZXR1cm4gbmFtZVxuICAgICAgLy8g5oyJ6L+e5o6l56ym5ou85o6lXG4gICAgICAucmVwbGFjZUFsbCgvKFthLXpdKShbQS1aXSkvZywgYCQxJHtzZXBhcmF0b3J9JDJgKVxuICAgICAgLy8g6L2s5bCP5YaZXG4gICAgICAudG9Mb3dlckNhc2UoKTtcbiAgfSxcbn0pO1xuIiwiaW1wb3J0IHsgX1N0cmluZyB9IGZyb20gJy4vX1N0cmluZyc7XG5pbXBvcnQgeyBGQUxTRSwgUkFXIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuZXhwb3J0IGNvbnN0IERhdGEgPSB7XG4gIC8vIOeugOWNleexu+Wei1xuICBTSU1QTEVfVFlQRVM6IFtudWxsLCB1bmRlZmluZWQsIE51bWJlciwgU3RyaW5nLCBCb29sZWFuLCBCaWdJbnQsIFN5bWJvbF0sXG4gIC8qKlxuICAgKiDojrflj5blgLznmoTlhbfkvZPnsbvlnotcbiAgICogQHBhcmFtIHZhbHVlIHsqfSDlgLxcbiAgICogQHJldHVybnMge09iamVjdENvbnN0cnVjdG9yfCp8RnVuY3Rpb259IOi/lOWbnuWvueW6lOaehOmAoOWHveaVsOOAgm51bGzjgIF1bmRlZmluZWQg5Y6f5qC36L+U5ZueXG4gICAqL1xuICBnZXRFeGFjdFR5cGUodmFsdWUpIHtcbiAgICAvLyBudWxs44CBdW5kZWZpbmVkIOWOn+agt+i/lOWbnlxuICAgIGlmIChbbnVsbCwgdW5kZWZpbmVkXS5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgX19wcm90b19fID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICAvLyB2YWx1ZSDkuLogT2JqZWN0LnByb3RvdHlwZSDmiJYgT2JqZWN0LmNyZWF0ZShudWxsKSDmlrnlvI/lo7DmmI7nmoTlr7nosaHml7YgX19wcm90b19fIOS4uiBudWxsXG4gICAgY29uc3QgaXNPYmplY3RCeUNyZWF0ZU51bGwgPSBfX3Byb3RvX18gPT09IG51bGw7XG4gICAgaWYgKGlzT2JqZWN0QnlDcmVhdGVOdWxsKSB7XG4gICAgICAvLyBjb25zb2xlLndhcm4oJ2lzT2JqZWN0QnlDcmVhdGVOdWxsJywgX19wcm90b19fKTtcbiAgICAgIHJldHVybiBPYmplY3Q7XG4gICAgfVxuICAgIC8vIOWvueW6lOe7p+aJv+eahOWvueixoSBfX3Byb3RvX18g5rKh5pyJIGNvbnN0cnVjdG9yIOWxnuaAp1xuICAgIGNvbnN0IGlzT2JqZWN0RXh0ZW5kc09iamVjdEJ5Q3JlYXRlTnVsbCA9ICEoJ2NvbnN0cnVjdG9yJyBpbiBfX3Byb3RvX18pO1xuICAgIGlmIChpc09iamVjdEV4dGVuZHNPYmplY3RCeUNyZWF0ZU51bGwpIHtcbiAgICAgIC8vIGNvbnNvbGUud2FybignaXNPYmplY3RFeHRlbmRzT2JqZWN0QnlDcmVhdGVOdWxsJywgX19wcm90b19fKTtcbiAgICAgIHJldHVybiBPYmplY3Q7XG4gICAgfVxuICAgIC8vIOi/lOWbnuWvueW6lOaehOmAoOWHveaVsFxuICAgIHJldHVybiBfX3Byb3RvX18uY29uc3RydWN0b3I7XG4gIH0sXG4gIC8qKlxuICAgKiDojrflj5blgLznmoTlhbfkvZPnsbvlnovliJfooahcbiAgICogQHBhcmFtIHZhbHVlIHsqfSDlgLxcbiAgICogQHJldHVybnMgeypbXX0g57uf5LiA6L+U5Zue5pWw57uE44CCbnVsbOOAgXVuZGVmaW5lZCDlr7nlupTkuLogW251bGxdLFt1bmRlZmluZWRdXG4gICAqL1xuICBnZXRFeGFjdFR5cGVzKHZhbHVlKSB7XG4gICAgLy8gbnVsbOOAgXVuZGVmaW5lZCDliKTmlq3lpITnkIZcbiAgICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICB9XG4gICAgLy8g5omr5Y6f5Z6L6ZO+5b6X5Yiw5a+55bqU5p6E6YCg5Ye95pWwXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBsb29wID0gMDtcbiAgICBsZXQgaGFzT2JqZWN0RXh0ZW5kc09iamVjdEJ5Q3JlYXRlTnVsbCA9IGZhbHNlO1xuICAgIGxldCBfX3Byb3RvX18gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAvLyBjb25zb2xlLndhcm4oJ3doaWxlJywgbG9vcCwgX19wcm90b19fKTtcbiAgICAgIGlmIChfX3Byb3RvX18gPT09IG51bGwpIHtcbiAgICAgICAgLy8g5LiA6L+b5p2lIF9fcHJvdG9fXyDlsLHmmK8gbnVsbCDor7TmmI4gdmFsdWUg5Li6IE9iamVjdC5wcm90b3R5cGUg5oiWIE9iamVjdC5jcmVhdGUobnVsbCkg5pa55byP5aOw5piO55qE5a+56LGhXG4gICAgICAgIGlmIChsb29wIDw9IDApIHtcbiAgICAgICAgICByZXN1bHQucHVzaChPYmplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChoYXNPYmplY3RFeHRlbmRzT2JqZWN0QnlDcmVhdGVOdWxsKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChPYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICgnY29uc3RydWN0b3InIGluIF9fcHJvdG9fXykge1xuICAgICAgICByZXN1bHQucHVzaChfX3Byb3RvX18uY29uc3RydWN0b3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnB1c2goT2JqZWN0KTtcbiAgICAgICAgaGFzT2JqZWN0RXh0ZW5kc09iamVjdEJ5Q3JlYXRlTnVsbCA9IHRydWU7XG4gICAgICB9XG4gICAgICBfX3Byb3RvX18gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoX19wcm90b19fKTtcbiAgICAgIGxvb3ArKztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLyoqXG4gICAqIOa3seaLt+i0neaVsOaNrlxuICAgKiBAcGFyYW0gc291cmNlIHsqfVxuICAgKiBAcmV0dXJucyB7TWFwPGFueSwgYW55PnxTZXQ8YW55Pnx7fXwqfCpbXX1cbiAgICovXG4gIGRlZXBDbG9uZShzb3VyY2UpIHtcbiAgICAvLyDmlbDnu4RcbiAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2Ygc291cmNlLnZhbHVlcygpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZGVlcENsb25lKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBTZXRcbiAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICBsZXQgcmVzdWx0ID0gbmV3IFNldCgpO1xuICAgICAgZm9yIChsZXQgdmFsdWUgb2Ygc291cmNlLnZhbHVlcygpKSB7XG4gICAgICAgIHJlc3VsdC5hZGQodGhpcy5kZWVwQ2xvbmUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIE1hcFxuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgIGxldCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2Ygc291cmNlLmVudHJpZXMoKSkge1xuICAgICAgICByZXN1bHQuc2V0KGtleSwgdGhpcy5kZWVwQ2xvbmUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIOWvueixoVxuICAgIGlmIChEYXRhLmdldEV4YWN0VHlwZShzb3VyY2UpID09PSBPYmplY3QpIHtcbiAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgZGVzY10gb2YgT2JqZWN0LmVudHJpZXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkpIHtcbiAgICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzYykge1xuICAgICAgICAgIC8vIHZhbHVl5pa55byP77ya6YCS5b2S5aSE55CGXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdCwga2V5LCB7XG4gICAgICAgICAgICAuLi5kZXNjLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuZGVlcENsb25lKGRlc2MudmFsdWUpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGdldC9zZXQg5pa55byP77ya55u05o6l5a6a5LmJXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8g5YW25LuW77ya5Y6f5qC36L+U5ZueXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSxcbiAgLyoqXG4gICAqIOa3seino+WMheaVsOaNrlxuICAgKiBAcGFyYW0gZGF0YSB7Kn0g5YC8XG4gICAqIEBwYXJhbSBpc1dyYXAge2Z1bmN0aW9ufSDljIXoo4XmlbDmja7liKTmlq3lh73mlbDvvIzlpoJ2dWUz55qEaXNSZWblh73mlbBcbiAgICogQHBhcmFtIHVud3JhcCB7ZnVuY3Rpb259IOino+WMheaWueW8j+WHveaVsO+8jOWmgnZ1ZTPnmoR1bnJlZuWHveaVsFxuICAgKiBAcmV0dXJucyB7KCp8e1twOiBzdHJpbmddOiBhbnl9KVtdfCp8e1twOiBzdHJpbmddOiBhbnl9fHtbcDogc3RyaW5nXTogKnx7W3A6IHN0cmluZ106IGFueX19fVxuICAgKi9cbiAgZGVlcFVud3JhcChkYXRhLCB7IGlzV3JhcCA9IEZBTFNFLCB1bndyYXAgPSBSQVcgfSA9IHt9KSB7XG4gICAgLy8g6YCJ6aG55pS26ZuGXG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgaXNXcmFwLCB1bndyYXAgfTtcbiAgICAvLyDljIXoo4XnsbvlnovvvIjlpoJ2dWUz5ZON5bqU5byP5a+56LGh77yJ5pWw5o2u6Kej5YyFXG4gICAgaWYgKGlzV3JhcChkYXRhKSkge1xuICAgICAgcmV0dXJuIERhdGEuZGVlcFVud3JhcCh1bndyYXAoZGF0YSksIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyDpgJLlvZLlpITnkIbnmoTnsbvlnotcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICByZXR1cm4gZGF0YS5tYXAodmFsID0+IERhdGEuZGVlcFVud3JhcCh2YWwsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgaWYgKERhdGEuZ2V0RXhhY3RUeXBlKGRhdGEpID09PSBPYmplY3QpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoZGF0YSkubWFwKChba2V5LCB2YWxdKSA9PiB7XG4gICAgICAgIHJldHVybiBba2V5LCBEYXRhLmRlZXBVbndyYXAodmFsLCBvcHRpb25zKV07XG4gICAgICB9KSk7XG4gICAgfVxuICAgIC8vIOWFtuS7luWOn+agt+i/lOWbnlxuICAgIHJldHVybiBkYXRhO1xuICB9LFxufTtcbmV4cG9ydCBjb25zdCBWdWVEYXRhID0ge1xuICAvKipcbiAgICog5rex6Kej5YyFdnVlM+WTjeW6lOW8j+WvueixoeaVsOaNrlxuICAgKiBAcGFyYW0gZGF0YSB7Kn1cbiAgICogQHJldHVybnMgeygqfHtbcDogc3RyaW5nXTogKn0pW118Knx7W3A6IHN0cmluZ106ICp9fHtbcDogc3RyaW5nXTogKnx7W3A6IHN0cmluZ106ICp9fX1cbiAgICovXG4gIGRlZXBVbndyYXBWdWUzKGRhdGEpIHtcbiAgICByZXR1cm4gRGF0YS5kZWVwVW53cmFwKGRhdGEsIHtcbiAgICAgIGlzV3JhcDogZGF0YSA9PiBkYXRhPy5fX3ZfaXNSZWYsXG4gICAgICB1bndyYXA6IGRhdGEgPT4gZGF0YS52YWx1ZSxcbiAgICB9KTtcbiAgfSxcbiAgLyoqXG4gICAqIOS7jiBhdHRycyDkuK3mj5Dlj5YgcHJvcHMg5a6a5LmJ55qE5bGe5oCnXG4gICAqIEBwYXJhbSBhdHRycyB2dWUgYXR0cnNcbiAgICogQHBhcmFtIHByb3BEZWZpbml0aW9ucyBwcm9wcyDlrprkuYnvvIzlpoIgRWxCdXR0b24ucHJvcHMg562JXG4gICAqIEByZXR1cm5zIHt7fX1cbiAgICovXG4gIGdldFByb3BzRnJvbUF0dHJzKGF0dHJzLCBwcm9wRGVmaW5pdGlvbnMpIHtcbiAgICAvLyBwcm9wcyDlrprkuYnnu5/kuIDmiJDlr7nosaHmoLzlvI/vvIx0eXBlIOe7n+S4gOaIkOaVsOe7hOagvOW8j+S7peS+v+WQjue7reWIpOaWrVxuICAgIGlmIChwcm9wRGVmaW5pdGlvbnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgcHJvcERlZmluaXRpb25zID0gT2JqZWN0LmZyb21FbnRyaWVzKHByb3BEZWZpbml0aW9ucy5tYXAobmFtZSA9PiBbX1N0cmluZy50b0NhbWVsQ2FzZShuYW1lKSwgeyB0eXBlOiBbXSB9XSkpO1xuICAgIH0gZWxzZSBpZiAoRGF0YS5nZXRFeGFjdFR5cGUocHJvcERlZmluaXRpb25zKSA9PT0gT2JqZWN0KSB7XG4gICAgICBwcm9wRGVmaW5pdGlvbnMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMocHJvcERlZmluaXRpb25zKS5tYXAoKFtuYW1lLCBkZWZpbml0aW9uXSkgPT4ge1xuICAgICAgICBkZWZpbml0aW9uID0gRGF0YS5nZXRFeGFjdFR5cGUoZGVmaW5pdGlvbikgPT09IE9iamVjdFxuICAgICAgICAgID8geyAuLi5kZWZpbml0aW9uLCB0eXBlOiBbZGVmaW5pdGlvbi50eXBlXS5mbGF0KCkgfVxuICAgICAgICAgIDogeyB0eXBlOiBbZGVmaW5pdGlvbl0uZmxhdCgpIH07XG4gICAgICAgIHJldHVybiBbX1N0cmluZy50b0NhbWVsQ2FzZShuYW1lKSwgZGVmaW5pdGlvbl07XG4gICAgICB9KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BEZWZpbml0aW9ucyA9IHt9O1xuICAgIH1cbiAgICAvLyDorr7nva7lgLxcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBbbmFtZSwgZGVmaW5pdGlvbl0gb2YgT2JqZWN0LmVudHJpZXMocHJvcERlZmluaXRpb25zKSkge1xuICAgICAgKGZ1bmN0aW9uIHNldFJlc3VsdCh7IG5hbWUsIGRlZmluaXRpb24sIGVuZCA9IGZhbHNlIH0pIHtcbiAgICAgICAgLy8gcHJvcE5hbWUg5oiWIHByb3AtbmFtZSDmoLzlvI/pgJLlvZLov5vmnaVcbiAgICAgICAgaWYgKG5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSBhdHRyc1tuYW1lXTtcbiAgICAgICAgICBjb25zdCBjYW1lbE5hbWUgPSBfU3RyaW5nLnRvQ2FtZWxDYXNlKG5hbWUpO1xuICAgICAgICAgIC8vIOWPquWMheWQq0Jvb2xlYW7nsbvlnovnmoQnJ+i9rOaNouS4unRydWXvvIzlhbbku5bljp/moLfotYvlgLxcbiAgICAgICAgICByZXN1bHRbY2FtZWxOYW1lXSA9IGRlZmluaXRpb24udHlwZS5sZW5ndGggPT09IDEgJiYgZGVmaW5pdGlvbi50eXBlLmluY2x1ZGVzKEJvb2xlYW4pICYmIGF0dHJWYWx1ZSA9PT0gJycgPyB0cnVlIDogYXR0clZhbHVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcm9wLW5hbWUg5qC85byP6L+b6YCS5b2SXG4gICAgICAgIGlmIChlbmQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHNldFJlc3VsdCh7IG5hbWU6IF9TdHJpbmcudG9MaW5lQ2FzZShuYW1lKSwgZGVmaW5pdGlvbiwgZW5kOiB0cnVlIH0pO1xuICAgICAgfSkoe1xuICAgICAgICBuYW1lLCBkZWZpbml0aW9uLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIC8qKlxuICAgKiDku44gYXR0cnMg5Lit5o+Q5Y+WIGVtaXRzIOWumuS5ieeahOWxnuaAp1xuICAgKiBAcGFyYW0gYXR0cnMgdnVlIGF0dHJzXG4gICAqIEBwYXJhbSBlbWl0RGVmaW5pdGlvbnMgZW1pdHMg5a6a5LmJ77yM5aaCIEVsQnV0dG9uLmVtaXRzIOetiVxuICAgKiBAcmV0dXJucyB7e319XG4gICAqL1xuICBnZXRFbWl0c0Zyb21BdHRycyhhdHRycywgZW1pdERlZmluaXRpb25zKSB7XG4gICAgLy8gZW1pdHMg5a6a5LmJ57uf5LiA5oiQ5pWw57uE5qC85byPXG4gICAgaWYgKERhdGEuZ2V0RXhhY3RUeXBlKGVtaXREZWZpbml0aW9ucykgPT09IE9iamVjdCkge1xuICAgICAgZW1pdERlZmluaXRpb25zID0gT2JqZWN0LmtleXMoZW1pdERlZmluaXRpb25zKTtcbiAgICB9IGVsc2UgaWYgKCEoZW1pdERlZmluaXRpb25zIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICBlbWl0RGVmaW5pdGlvbnMgPSBbXTtcbiAgICB9XG4gICAgLy8g57uf5LiA5aSE55CG5oiQIG9uRW1pdE5hbWXjgIFvblVwZGF0ZTplbWl0TmFtZSh2LW1vZGVs57O75YiXKSDmoLzlvI9cbiAgICBjb25zdCBlbWl0TmFtZXMgPSBlbWl0RGVmaW5pdGlvbnMubWFwKG5hbWUgPT4gX1N0cmluZy50b0NhbWVsQ2FzZShgb24tJHtuYW1lfWApKTtcbiAgICAvLyDorr7nva7lgLxcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGVtaXROYW1lcykge1xuICAgICAgKGZ1bmN0aW9uIHNldFJlc3VsdCh7IG5hbWUsIGVuZCA9IGZhbHNlIH0pIHtcbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnb25VcGRhdGU6JykpIHtcbiAgICAgICAgICAvLyBvblVwZGF0ZTplbWl0TmFtZSDmiJYgb25VcGRhdGU6ZW1pdC1uYW1lIOagvOW8j+mAkuW9kui/m+adpVxuICAgICAgICAgIGlmIChuYW1lIGluIGF0dHJzKSB7XG4gICAgICAgICAgICBjb25zdCBjYW1lbE5hbWUgPSBfU3RyaW5nLnRvQ2FtZWxDYXNlKG5hbWUpO1xuICAgICAgICAgICAgcmVzdWx0W2NhbWVsTmFtZV0gPSBhdHRyc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gb25VcGRhdGU6ZW1pdC1uYW1lIOagvOW8j+i/m+mAkuW9klxuICAgICAgICAgIGlmIChlbmQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc2V0UmVzdWx0KHsgbmFtZTogYG9uVXBkYXRlOiR7X1N0cmluZy50b0xpbmVDYXNlKG5hbWUuc2xpY2UobmFtZS5pbmRleE9mKCc6JykgKyAxKSl9YCwgZW5kOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9uRW1pdE5hbWXmoLzlvI/vvIzkuK3liJLnur/moLzlvI/lt7Looqt2dWXovazmjaLkuI3nlKjph43lpI3lpITnkIZcbiAgICAgICAgaWYgKG5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgICByZXN1bHRbbmFtZV0gPSBhdHRyc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfSkoeyBuYW1lIH0pO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygncmVzdWx0JywgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAvKipcbiAgICog5LuOIGF0dHJzIOS4reaPkOWPluWJqeS9meWxnuaAp+OAguW4uOeUqOS6jue7hOS7tmluaGVyaXRBdHRyc+iuvue9rmZhbHNl5pe25L2/55So5L2c5Li65paw55qEYXR0cnNcbiAgICogQHBhcmFtIGF0dHJzIHZ1ZSBhdHRyc1xuICAgKiBAcGFyYW0ge30g6YWN572u6aG5XG4gICAqICAgICAgICAgIEBwYXJhbSBwcm9wcyBwcm9wcyDlrprkuYkg5oiWIHZ1ZSBwcm9wc++8jOWmgiBFbEJ1dHRvbi5wcm9wcyDnrYlcbiAgICogICAgICAgICAgQHBhcmFtIGVtaXRzIGVtaXRzIOWumuS5iSDmiJYgdnVlIGVtaXRz77yM5aaCIEVsQnV0dG9uLmVtaXRzIOetiVxuICAgKiAgICAgICAgICBAcGFyYW0gbGlzdCDpop3lpJbnmoTmma7pgJrlsZ7mgKdcbiAgICogQHJldHVybnMge3t9fVxuICAgKi9cbiAgZ2V0UmVzdEZyb21BdHRycyhhdHRycywgeyBwcm9wcywgZW1pdHMsIGxpc3QgPSBbXSB9ID0ge30pIHtcbiAgICAvLyDnu5/kuIDmiJDmlbDnu4TmoLzlvI9cbiAgICBwcm9wcyA9ICgoKSA9PiB7XG4gICAgICBjb25zdCBhcnIgPSAoKCkgPT4ge1xuICAgICAgICBpZiAocHJvcHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoRGF0YS5nZXRFeGFjdFR5cGUocHJvcHMpID09PSBPYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0pKCk7XG4gICAgICByZXR1cm4gYXJyLm1hcChuYW1lID0+IFtfU3RyaW5nLnRvQ2FtZWxDYXNlKG5hbWUpLCBfU3RyaW5nLnRvTGluZUNhc2UobmFtZSldKS5mbGF0KCk7XG4gICAgfSkoKTtcbiAgICBlbWl0cyA9ICgoKSA9PiB7XG4gICAgICBjb25zdCBhcnIgPSAoKCkgPT4ge1xuICAgICAgICBpZiAoZW1pdHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIHJldHVybiBlbWl0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoRGF0YS5nZXRFeGFjdFR5cGUoZW1pdHMpID09PSBPYmplY3QpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoZW1pdHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0pKCk7XG4gICAgICByZXR1cm4gYXJyLm1hcCgobmFtZSkgPT4ge1xuICAgICAgICAvLyB1cGRhdGU6ZW1pdE5hbWUg5oiWIHVwZGF0ZTplbWl0LW5hbWUg5qC85byPXG4gICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ3VwZGF0ZTonKSkge1xuICAgICAgICAgIGNvbnN0IHBhcnROYW1lID0gbmFtZS5zbGljZShuYW1lLmluZGV4T2YoJzonKSArIDEpO1xuICAgICAgICAgIHJldHVybiBbYG9uVXBkYXRlOiR7X1N0cmluZy50b0NhbWVsQ2FzZShwYXJ0TmFtZSl9YCwgYG9uVXBkYXRlOiR7X1N0cmluZy50b0xpbmVDYXNlKHBhcnROYW1lKX1gXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvbkVtaXROYW1l5qC85byP77yM5Lit5YiS57q/5qC85byP5bey6KKrdnVl6L2s5o2i5LiN55So6YeN5aSN5aSE55CGXG4gICAgICAgIHJldHVybiBbX1N0cmluZy50b0NhbWVsQ2FzZShgb24tJHtuYW1lfWApXTtcbiAgICAgIH0pLmZsYXQoKTtcbiAgICB9KSgpO1xuICAgIGxpc3QgPSAoKCkgPT4ge1xuICAgICAgY29uc3QgYXJyID0gRGF0YS5nZXRFeGFjdFR5cGUobGlzdCkgPT09IFN0cmluZ1xuICAgICAgICA/IGxpc3Quc3BsaXQoJywnKVxuICAgICAgICA6IGxpc3QgaW5zdGFuY2VvZiBBcnJheSA/IGxpc3QgOiBbXTtcbiAgICAgIHJldHVybiBhcnIubWFwKHZhbCA9PiB2YWwudHJpbSgpKS5maWx0ZXIodmFsID0+IHZhbCk7XG4gICAgfSkoKTtcbiAgICBjb25zdCBsaXN0QWxsID0gQXJyYXkuZnJvbShuZXcgU2V0KFtwcm9wcywgZW1pdHMsIGxpc3RdLmZsYXQoKSkpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdsaXN0QWxsJywgbGlzdEFsbCk7XG4gICAgLy8g6K6+572u5YC8XG4gICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgW25hbWUsIGRlc2NdIG9mIE9iamVjdC5lbnRyaWVzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGF0dHJzKSkpIHtcbiAgICAgIGlmICghbGlzdEFsbC5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBuYW1lLCBkZXNjKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ3Jlc3VsdCcsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi9EYXRhJztcblxuZXhwb3J0IGNvbnN0IF9EYXRlID0gT2JqZWN0LmNyZWF0ZShEYXRlKTtcbk9iamVjdC5hc3NpZ24oX0RhdGUsIHtcbiAgLyoqXG4gICAqIOWIm+W7ukRhdGXlr7nosaFcbiAgICogQHBhcmFtIGFyZ3MgeypbXX0g5aSa5Liq5YC8XG4gICAqIEByZXR1cm5zIHtEYXRlfVxuICAgKi9cbiAgY3JlYXRlKC4uLmFyZ3MpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gc2FmYXJpIOa1j+iniOWZqOWtl+espuS4suagvOW8j+WFvOWuuVxuICAgICAgY29uc3QgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICBjb25zdCB2YWx1ZVJlc3VsdCA9IERhdGEuZ2V0RXhhY3RUeXBlKHZhbHVlKSA9PT0gU3RyaW5nID8gdmFsdWUucmVwbGFjZUFsbCgnLScsICcvJykgOiB2YWx1ZTtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZVJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIOS8oOWPguihjOS4uuWFiOWSjERhdGXkuIDoh7TvvIzlkI7nu63lho3mlLbpm4bpnIDmsYLliqDlvLrlrprliLYo5rOo5oSP5peg5Y+C5ZKM5pi+5byPdW5kZWZpbmVk55qE5Yy65YirKVxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyBuZXcgRGF0ZSgpIDogbmV3IERhdGUoLi4uYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sXG59KTtcbiIsImV4cG9ydCBjb25zdCBfTWF0aCA9IE9iamVjdC5jcmVhdGUoTWF0aCk7XG5PYmplY3QuYXNzaWduKF9NYXRoLCB7XG4vLyDlop7liqDpg6jliIblkb3lkI3ku6XmjqXov5HmlbDlrabooajovr7mlrnlvI9cbiAgYXJjc2luOiBNYXRoLmFzaW4sXG4gIGFyY2NvczogTWF0aC5hY29zLFxuICBhcmN0YW46IE1hdGguYXRhbixcbiAgYXJzaW5oOiBNYXRoLmFzaW5oLFxuICBhcmNvc2g6IE1hdGguYWNvc2gsXG4gIGFydGFuaDogTWF0aC5hdGFuaCxcbiAgbG9nZTogTWF0aC5sb2csXG4gIGxuOiBNYXRoLmxvZyxcbiAgbGc6IE1hdGgubG9nMTAsXG4gIGxvZyhhLCB4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5sb2coYSk7XG4gIH0sXG59KTtcbiIsImV4cG9ydCBjb25zdCBfUmVmbGVjdCA9IE9iamVjdC5jcmVhdGUoUmVmbGVjdCk7XG5PYmplY3QuYXNzaWduKF9SZWZsZWN0LCB7XG4vLyDlr7kgb3duS2V5cyDphY3lpZcgb3duVmFsdWVzIOWSjCBvd25FbnRyaWVzXG4gIG93blZhbHVlcyh0YXJnZXQpIHtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCkubWFwKGtleSA9PiB0YXJnZXRba2V5XSk7XG4gIH0sXG4gIG93bkVudHJpZXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpLm1hcChrZXkgPT4gW2tleSwgdGFyZ2V0W2tleV1dKTtcbiAgfSxcbn0pO1xuIiwiZXhwb3J0IGNvbnN0IF9TZXQgPSBPYmplY3QuY3JlYXRlKFNldCk7XG5PYmplY3QuYXNzaWduKF9TZXQsIHtcbiAgLyoqXG4gICAqIOWKoOW8umFkZOaWueazleOAgui3n+aVsOe7hHB1c2jmlrnms5XkuIDmoLflj6/mt7vliqDlpJrkuKrlgLxcbiAgICogQHBhcmFtIHNldCB7U2V0fSDnm67moIdzZXRcbiAgICogQHBhcmFtIGFyZ3MgeypbXX0g5aSa5Liq5YC8XG4gICAqL1xuICBhZGQoc2V0LCAuLi5hcmdzKSB7XG4gICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgICAgc2V0LmFkZChhcmcpO1xuICAgIH1cbiAgfSxcbn0pO1xuIiwiaW1wb3J0IHsgX1JlZmxlY3QgfSBmcm9tICcuL19SZWZsZWN0JztcbmltcG9ydCB7IF9TZXQgfSBmcm9tICcuL19TZXQnO1xuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4vRGF0YSc7XG5cbi8qKlxuICog5bGe5oCn5ZCN57uf5LiA5oiQ5pWw57uE5qC85byPXG4gKiBAcGFyYW0gbmFtZXMge3N0cmluZ3xTeW1ib2x8YXJyYXl9IOWxnuaAp+WQjeOAguagvOW8jyAnYSxiLGMnIOaIliBbJ2EnLCdiJywnYyddXG4gKiBAcGFyYW0gc2VwYXJhdG9yIHtzdHJpbmd8UmVnRXhwfSBuYW1lcyDkuLrlrZfnrKbkuLLml7bnmoTmi4bliIbop4TliJnjgILlkIwgc3BsaXQg5pa55rOV55qEIHNlcGFyYXRvcu+8jOWtl+espuS4suaXoOmcgOaLhuWIhueahOWPr+S7peS8oCBudWxsIOaIliB1bmRlZmluZWRcbiAqIEByZXR1cm5zIHsqW11bXXwoTWFnaWNTdHJpbmcgfCBCdW5kbGUgfCBzdHJpbmcpW118RmxhdEFycmF5PChGbGF0QXJyYXk8KCp8WypbXV18W10pW10sIDE+W118KnxbKltdXXxbXSlbXSwgMT5bXXwqW119XG4gKi9cbmZ1bmN0aW9uIG5hbWVzVG9BcnJheShuYW1lcyA9IFtdLCB7IHNlcGFyYXRvciA9ICcsJyB9ID0ge30pIHtcbiAgaWYgKG5hbWVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICByZXR1cm4gbmFtZXMubWFwKHZhbCA9PiBuYW1lc1RvQXJyYXkodmFsKSkuZmxhdCgpO1xuICB9XG4gIGNvbnN0IGV4YWN0VHlwZSA9IERhdGEuZ2V0RXhhY3RUeXBlKG5hbWVzKTtcbiAgaWYgKGV4YWN0VHlwZSA9PT0gU3RyaW5nKSB7XG4gICAgcmV0dXJuIG5hbWVzLnNwbGl0KHNlcGFyYXRvcikubWFwKHZhbCA9PiB2YWwudHJpbSgpKS5maWx0ZXIodmFsID0+IHZhbCk7XG4gIH1cbiAgaWYgKGV4YWN0VHlwZSA9PT0gU3ltYm9sKSB7XG4gICAgcmV0dXJuIFtuYW1lc107XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuLy8gY29uc29sZS5sb2cobmFtZXNUb0FycmF5KFN5bWJvbCgpKSk7XG4vLyBjb25zb2xlLmxvZyhuYW1lc1RvQXJyYXkoWydhJywgJ2InLCAnYycsIFN5bWJvbCgpXSkpO1xuLy8gY29uc29sZS5sb2cobmFtZXNUb0FycmF5KCdhLGIsYycpKTtcbi8vIGNvbnNvbGUubG9nKG5hbWVzVG9BcnJheShbJ2EsYixjJywgU3ltYm9sKCldKSk7XG5leHBvcnQgY29uc3QgX09iamVjdCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0KTtcbk9iamVjdC5hc3NpZ24oX09iamVjdCwge1xuICAvKipcbiAgICog5rWF5ZCI5bm25a+56LGh44CC5YaZ5rOV5ZCMIE9iamVjdC5hc3NpZ25cbiAgICog6YCa6L+H6YeN5a6a5LmJ5pa55byP5ZCI5bm277yM6Kej5YazIE9iamVjdC5hc3NpZ24g5ZCI5bm25Lik6L655ZCM5ZCN5bGe5oCn5re35pyJIHZhbHVl5YaZ5rOVIOWSjCBnZXQvc2V05YaZ5rOVIOaXtuaKpSBUeXBlRXJyb3I6IENhbm5vdCBzZXQgcHJvcGVydHkgYiBvZiAjPE9iamVjdD4gd2hpY2ggaGFzIG9ubHkgYSBnZXR0ZXIg55qE6Zeu6aKYXG4gICAqIEBwYXJhbSB0YXJnZXQge29iamVjdH0g55uu5qCH5a+56LGhXG4gICAqIEBwYXJhbSBzb3VyY2VzIHthbnlbXX0g5pWw5o2u5rqQ44CC5LiA5Liq5oiW5aSa5Liq5a+56LGhXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgYXNzaWduKHRhcmdldCA9IHt9LCAuLi5zb3VyY2VzKSB7XG4gICAgZm9yIChjb25zdCBzb3VyY2Ugb2Ygc291cmNlcykge1xuICAgICAgLy8g5LiN5L2/55SoIHRhcmdldFtrZXldPXZhbHVlIOWGmeazle+8jOebtOaOpeS9v+eUqGRlc2Pph43lrprkuYlcbiAgICAgIGZvciAoY29uc3QgW2tleSwgZGVzY10gb2YgT2JqZWN0LmVudHJpZXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSxcbiAgLyoqXG4gICAqIOa3seWQiOW5tuWvueixoeOAguWQjCBhc3NpZ24g5LiA5qC35Lmf5Lya5a+55bGe5oCn6L+b6KGM6YeN5a6a5LmJXG4gICAqIEBwYXJhbSB0YXJnZXQge29iamVjdH0g55uu5qCH5a+56LGh44CC6buY6K6k5YC8IHt9IOmYsuatoumAkuW9kuaXtuaKpSBUeXBlRXJyb3I6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxsZWQgb24gbm9uLW9iamVjdFxuICAgKiBAcGFyYW0gc291cmNlcyB7YW55W119IOaVsOaNrua6kOOAguS4gOS4quaIluWkmuS4quWvueixoVxuICAgKi9cbiAgZGVlcEFzc2lnbih0YXJnZXQgPSB7fSwgLi4uc291cmNlcykge1xuICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgZGVzY10gb2YgT2JqZWN0LmVudHJpZXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkpIHtcbiAgICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzYykge1xuICAgICAgICAgIC8vIHZhbHVl5YaZ5rOV77ya5a+56LGh6YCS5b2S5aSE55CG77yM5YW25LuW55u05o6l5a6a5LmJXG4gICAgICAgICAgaWYgKERhdGEuZ2V0RXhhY3RUeXBlKGRlc2MudmFsdWUpID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICAgICAgICAgICAgICAuLi5kZXNjLFxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5kZWVwQXNzaWduKHRhcmdldFtrZXldLCBkZXNjLnZhbHVlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBnZXQvc2V05YaZ5rOV77ya55u05o6l5a6a5LmJXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9LFxuICAvKipcbiAgICoga2V56Ieq6Lqr5omA5bGe55qE5a+56LGhXG4gICAqIEBwYXJhbSBvYmplY3Qge29iamVjdH0g5a+56LGhXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ3xTeW1ib2x9IOWxnuaAp+WQjVxuICAgKiBAcmV0dXJucyB7KnxudWxsfVxuICAgKi9cbiAgb3duZXIob2JqZWN0LCBrZXkpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG4gICAgbGV0IF9fcHJvdG9fXyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICAgIGlmIChfX3Byb3RvX18gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vd25lcihfX3Byb3RvX18sIGtleSk7XG4gIH0sXG4gIC8qKlxuICAgKiDojrflj5blsZ7mgKfmj4/ov7Dlr7nosaHvvIznm7jmr5QgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcu+8jOiDveaLv+WIsOe7p+aJv+WxnuaAp+eahOaPj+i/sOWvueixoVxuICAgKiBAcGFyYW0gb2JqZWN0IHtvYmplY3R9XG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ3xTeW1ib2x9XG4gICAqIEByZXR1cm5zIHtQcm9wZXJ0eURlc2NyaXB0b3J9XG4gICAqL1xuICBkZXNjcmlwdG9yKG9iamVjdCwga2V5KSB7XG4gICAgY29uc3QgZmluZE9iamVjdCA9IHRoaXMub3duZXIob2JqZWN0LCBrZXkpO1xuICAgIGlmICghZmluZE9iamVjdCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZmluZE9iamVjdCwga2V5KTtcbiAgfSxcbiAgLyoqXG4gICAqIOiOt+WPluWxnuaAp+WQjeOAgum7mOiupOWPguaVsOmFjee9ruaIkOWQjCBPYmplY3Qua2V5cyDooYzkuLpcbiAgICogQHBhcmFtIG9iamVjdCB7b2JqZWN0fSDlr7nosaFcbiAgICogQHBhcmFtIHN5bWJvbCB7Ym9vbGVhbn0g5piv5ZCm5YyF5ZCrIHN5bWJvbCDlsZ7mgKdcbiAgICogQHBhcmFtIG5vdEVudW1lcmFibGUge2Jvb2xlYW59IOaYr+WQpuWMheWQq+S4jeWPr+WIl+S4vuWxnuaAp1xuICAgKiBAcGFyYW0gZXh0ZW5kIHtib29sZWFufSDmmK/lkKbljIXlkKvmib/nu6flsZ7mgKdcbiAgICogQHJldHVybnMge2FueVtdfVxuICAgKi9cbiAga2V5cyhvYmplY3QsIHsgc3ltYm9sID0gZmFsc2UsIG5vdEVudW1lcmFibGUgPSBmYWxzZSwgZXh0ZW5kID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgLy8g6YCJ6aG55pS26ZuGXG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgc3ltYm9sLCBub3RFbnVtZXJhYmxlLCBleHRlbmQgfTtcbiAgICAvLyBzZXTnlKjkuo5rZXnljrvph41cbiAgICBsZXQgc2V0ID0gbmV3IFNldCgpO1xuICAgIC8vIOiHqui6q+WxnuaAp+etm+mAiVxuICAgIGNvbnN0IGRlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIGRlc2NdIG9mIF9SZWZsZWN0Lm93bkVudHJpZXMoZGVzY3MpKSB7XG4gICAgICAvLyDlv73nlaVzeW1ib2zlsZ7mgKfnmoTmg4XlhrVcbiAgICAgIGlmICghc3ltYm9sICYmIERhdGEuZ2V0RXhhY3RUeXBlKGtleSkgPT09IFN5bWJvbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIOW/veeVpeS4jeWPr+WIl+S4vuWxnuaAp+eahOaDheWGtVxuICAgICAgaWYgKCFub3RFbnVtZXJhYmxlICYmICFkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyDlhbbku5blsZ7mgKfliqDlhaVcbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICB9XG4gICAgLy8g57un5om/5bGe5oCnXG4gICAgaWYgKGV4dGVuZCkge1xuICAgICAgY29uc3QgX19wcm90b19fID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgICBpZiAoX19wcm90b19fICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudEtleXMgPSB0aGlzLmtleXMoX19wcm90b19fLCBvcHRpb25zKTtcbiAgICAgICAgX1NldC5hZGQoc2V0LCAuLi5wYXJlbnRLZXlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8g6L+U5Zue5pWw57uEXG4gICAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbiAgfSxcbiAgLyoqXG4gICAqIOWvueW6lCBrZXlzIOiOt+WPliBkZXNjcmlwdG9yc++8jOS8oOWPguWQjCBrZXlzIOaWueazleOAguWPr+eUqOS6jumHjeWumuS5ieWxnuaAp1xuICAgKiBAcGFyYW0gb2JqZWN0IHtvYmplY3R9IOWvueixoVxuICAgKiBAcGFyYW0gc3ltYm9sIHtib29sZWFufSDmmK/lkKbljIXlkKsgc3ltYm9sIOWxnuaAp1xuICAgKiBAcGFyYW0gbm90RW51bWVyYWJsZSB7Ym9vbGVhbn0g5piv5ZCm5YyF5ZCr5LiN5Y+v5YiX5Li+5bGe5oCnXG4gICAqIEBwYXJhbSBleHRlbmQge2Jvb2xlYW59IOaYr+WQpuWMheWQq+aJv+e7p+WxnuaAp1xuICAgKiBAcmV0dXJucyB7UHJvcGVydHlEZXNjcmlwdG9yW119XG4gICAqL1xuICBkZXNjcmlwdG9ycyhvYmplY3QsIHsgc3ltYm9sID0gZmFsc2UsIG5vdEVudW1lcmFibGUgPSBmYWxzZSwgZXh0ZW5kID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgLy8g6YCJ6aG55pS26ZuGXG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgc3ltYm9sLCBub3RFbnVtZXJhYmxlLCBleHRlbmQgfTtcbiAgICBjb25zdCBrZXlzID0gdGhpcy5rZXlzKG9iamVjdCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGtleXMubWFwKGtleSA9PiB0aGlzLmRlc2NyaXB0b3Iob2JqZWN0LCBrZXkpKTtcbiAgfSxcbiAgLyoqXG4gICAqIOWvueW6lCBrZXlzIOiOt+WPliBkZXNjcmlwdG9yRW50cmllc++8jOS8oOWPguWQjCBrZXlzIOaWueazleOAguWPr+eUqOS6jumHjeWumuS5ieWxnuaAp1xuICAgKiBAcGFyYW0gb2JqZWN0IHtvYmplY3R9IOWvueixoVxuICAgKiBAcGFyYW0gc3ltYm9sIHtib29sZWFufSDmmK/lkKbljIXlkKsgc3ltYm9sIOWxnuaAp1xuICAgKiBAcGFyYW0gbm90RW51bWVyYWJsZSB7Ym9vbGVhbn0g5piv5ZCm5YyF5ZCr5LiN5Y+v5YiX5Li+5bGe5oCnXG4gICAqIEBwYXJhbSBleHRlbmQge2Jvb2xlYW59IOaYr+WQpuWMheWQq+aJv+e7p+WxnuaAp1xuICAgKiBAcmV0dXJucyB7W3N0cmluZ3xTeW1ib2wsUHJvcGVydHlEZXNjcmlwdG9yXVtdfVxuICAgKi9cbiAgZGVzY3JpcHRvckVudHJpZXMob2JqZWN0LCB7IHN5bWJvbCA9IGZhbHNlLCBub3RFbnVtZXJhYmxlID0gZmFsc2UsIGV4dGVuZCA9IGZhbHNlIH0gPSB7fSkge1xuICAgIC8vIOmAiemhueaUtumbhlxuICAgIGNvbnN0IG9wdGlvbnMgPSB7IHN5bWJvbCwgbm90RW51bWVyYWJsZSwgZXh0ZW5kIH07XG4gICAgY29uc3Qga2V5cyA9IHRoaXMua2V5cyhvYmplY3QsIG9wdGlvbnMpO1xuICAgIHJldHVybiBrZXlzLm1hcChrZXkgPT4gW2tleSwgdGhpcy5kZXNjcmlwdG9yKG9iamVjdCwga2V5KV0pO1xuICB9LFxuICAvKipcbiAgICog6YCJ5Y+W5a+56LGhXG4gICAqIEBwYXJhbSBvYmplY3Qge29iamVjdH0g5a+56LGhXG4gICAqIEBwYXJhbSBwaWNrIHtzdHJpbmd8YXJyYXl9IOaMkemAieWxnuaAp1xuICAgKiBAcGFyYW0gb21pdCB7c3RyaW5nfGFycmF5fSDlv73nlaXlsZ7mgKdcbiAgICogQHBhcmFtIGVtcHR5UGljayB7c3RyaW5nfSBwaWNrIOS4uuepuuaXtueahOWPluWAvOOAgmFsbCDlhajpg6hrZXnvvIxlbXB0eSDnqbpcbiAgICogQHBhcmFtIHNlcGFyYXRvciB7c3RyaW5nfFJlZ0V4cH0g5ZCMIG5hbWVzVG9BcnJheSDnmoQgc2VwYXJhdG9yIOWPguaVsFxuICAgKiBAcGFyYW0gc3ltYm9sIHtib29sZWFufSDlkIwga2V5cyDnmoQgc3ltYm9sIOWPguaVsFxuICAgKiBAcGFyYW0gbm90RW51bWVyYWJsZSB7Ym9vbGVhbn0g5ZCMIGtleXMg55qEIG5vdEVudW1lcmFibGUg5Y+C5pWwXG4gICAqIEBwYXJhbSBleHRlbmQge2Jvb2xlYW59IOWQjCBrZXlzIOeahCBleHRlbmQg5Y+C5pWwXG4gICAqIEByZXR1cm5zIHt7fX1cbiAgICovXG4gIGZpbHRlcihvYmplY3QsIHsgcGljayA9IFtdLCBvbWl0ID0gW10sIGVtcHR5UGljayA9ICdhbGwnLCBzZXBhcmF0b3IgPSAnLCcsIHN5bWJvbCA9IHRydWUsIG5vdEVudW1lcmFibGUgPSBmYWxzZSwgZXh0ZW5kID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgLy8gcGlja+OAgW9taXQg57uf5LiA5oiQ5pWw57uE5qC85byPXG4gICAgcGljayA9IG5hbWVzVG9BcnJheShwaWNrLCB7IHNlcGFyYXRvciB9KTtcbiAgICBvbWl0ID0gbmFtZXNUb0FycmF5KG9taXQsIHsgc2VwYXJhdG9yIH0pO1xuICAgIGxldCBrZXlzID0gW107XG4gICAgLy8gcGlja+acieWAvOebtOaOpeaLv++8jOS4uuepuuaXtuagueaNriBlbXB0eVBpY2sg6buY6K6k5ou/56m65oiW5YWo6YOoa2V5XG4gICAga2V5cyA9IHBpY2subGVuZ3RoID4gMCB8fCBlbXB0eVBpY2sgPT09ICdlbXB0eScgPyBwaWNrIDogdGhpcy5rZXlzKG9iamVjdCwgeyBzeW1ib2wsIG5vdEVudW1lcmFibGUsIGV4dGVuZCB9KTtcbiAgICAvLyBvbWl0562b6YCJXG4gICAga2V5cyA9IGtleXMuZmlsdGVyKGtleSA9PiAhb21pdC5pbmNsdWRlcyhrZXkpKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICBjb25zdCBkZXNjID0gdGhpcy5kZXNjcmlwdG9yKG9iamVjdCwga2V5KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIC8qKlxuICAgKiDpgJrov4fmjJHpgInmlrnlvI/pgInlj5blr7nosaHjgIJmaWx0ZXLnmoTnroDlhpnmlrnlvI9cbiAgICogQHBhcmFtIG9iamVjdCB7b2JqZWN0fSDlr7nosaFcbiAgICogQHBhcmFtIGtleXMge3N0cmluZ3xhcnJheX0g5bGe5oCn5ZCN6ZuG5ZCIXG4gICAqIEBwYXJhbSBvcHRpb25zIHtvYmplY3R9IOmAiemhue+8jOWQjCBmaWx0ZXIg55qE5ZCE6YCJ6aG55YC8XG4gICAqIEByZXR1cm5zIHt7fX1cbiAgICovXG4gIHBpY2sob2JqZWN0LCBrZXlzID0gW10sIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmZpbHRlcihvYmplY3QsIHsgcGljazoga2V5cywgZW1wdHlQaWNrOiAnZW1wdHknLCAuLi5vcHRpb25zIH0pO1xuICB9LFxuICAvKipcbiAgICog6YCa6L+H5o6S6Zmk5pa55byP6YCJ5Y+W5a+56LGh44CCZmlsdGVy55qE566A5YaZ5pa55byPXG4gICAqIEBwYXJhbSBvYmplY3Qge29iamVjdH0g5a+56LGhXG4gICAqIEBwYXJhbSBrZXlzIHtzdHJpbmd8YXJyYXl9IOWxnuaAp+WQjembhuWQiFxuICAgKiBAcGFyYW0gb3B0aW9ucyB7b2JqZWN0fSDpgInpobnvvIzlkIwgZmlsdGVyIOeahOWQhOmAiemhueWAvFxuICAgKiBAcmV0dXJucyB7e319XG4gICAqL1xuICBvbWl0KG9iamVjdCwga2V5cyA9IFtdLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIob2JqZWN0LCB7IG9taXQ6IGtleXMsIC4uLm9wdGlvbnMgfSk7XG4gIH0sXG59KTtcbiIsImV4cG9ydCBjb25zdCBfUHJveHkgPSBPYmplY3QuY3JlYXRlKFByb3h5KTtcbk9iamVjdC5hc3NpZ24oX1Byb3h5LCB7XG4gIC8qKlxuICAgKiDnu5Hlrpp0aGlz44CC5bi455So5LqO6Kej5p6E5Ye95pWw5pe257uR5a6adGhpc+mBv+WFjeaKpemUmVxuICAgKiBAcGFyYW0gdGFyZ2V0IHtvYmplY3R9IOebruagh+WvueixoVxuICAgKiBAcGFyYW0gb3B0aW9ucyB7b2JqZWN0fSDpgInpobnjgILmianlsZXnlKhcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBiaW5kVGhpcyh0YXJnZXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LCB7XG4gICAgICBnZXQodGFyZ2V0LCBwLCByZWNlaXZlcikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFJlZmxlY3QuZ2V0KC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8vIOWHveaVsOexu+Wei+e7keWumnRoaXNcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUuYmluZCh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOWFtuS7luWxnuaAp+WOn+agt+i/lOWbnlxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxufSk7XG4iLCI8IS0tICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cIkZvcm0tcm9vdFwiPlxuICAgIDxlbC1jYXJkPlxuICAgICAgPGVsLWZvcm0gOmxhYmVsLXdpZHRoPVwiMTAwXCI+XG4gICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCJ1c2VybmFtZVwiPlxuICAgICAgICAgIDwhLS0gdHlwZT1cIm5ldy10ZXh0XCIg5YW85a65IGZpcmVmb3ggLS0+XG4gICAgICAgICAgPGVsLWlucHV0IHYtbW9kZWw9XCJmb3JtSW5mby5tb2RlbC51c2VybmFtZVwiIHR5cGU9XCJuZXctdGV4dFwiPjwvZWwtaW5wdXQ+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwicGFzc3dvcmRcIj5cbiAgICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbD1cImZvcm1JbmZvLm1vZGVsLnBhc3N3b3JkXCIgdHlwZT1cIm5ldy1wYXNzd29yZFwiPjwvZWwtaW5wdXQ+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtPlxuICAgICAgICAgIDxlbC1idXR0b24gdHlwZT1cInByaW1hcnlcIiBAY2xpY2s9XCJmb3JtSW5mby5zdWJtaXRcIj7mj5DkuqQ8L2VsLWJ1dHRvbj5cbiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8L2VsLWZvcm0+XG4gICAgPC9lbC1jYXJkPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9uby1yZXNlcnZlZC1jb21wb25lbnQtbmFtZXNcbiAgICBuYW1lOiAnRm9ybScsXG4gIH07XG48L3NjcmlwdD5cbjxzY3JpcHQgc2V0dXA+XG4gIGltcG9ydCB7IF9Qcm94eSB9IGZyb20gJ2hwLXNoYXJlZC9zcmMvYmFzZS9pbmRleC5qcyc7XG4gIGltcG9ydCB7IHJlYWN0aXZlIH0gZnJvbSAndnVlJztcbiAgY29uc3QgZm9ybUluZm8gPSByZWFjdGl2ZShfUHJveHkuYmluZFRoaXMoe1xuICAgIG1vZGVsOiB7XG4gICAgICB1c2VybmFtZTogJycsXG4gICAgICBwYXNzd29yZDogJycsXG4gICAgfSxcbiAgICBydWxlczoge30sXG4gICAgc3VibWl0KCkge1xuICAgICAgY29uc29sZS5sb2coJ3N1Ym1pdCcsIHRoaXMubW9kZWwpO1xuICAgIH0sXG4gIH0pKTtcbjwvc2NyaXB0PlxuPHN0eWxlIHNjb3BlZCBsYW5nPVwic2Nzc1wiPlxuICAuRm9ybS1yb290e31cbjwvc3R5bGU+XG4iXSwibmFtZXMiOlsiX1N0cmluZyIsIm5hbWUiLCJzZXBhcmF0b3IiLCJmaXJzdCIsInJlZ2V4cCIsImNhbWVsTmFtZSIsInN1YnN0ciIsIiQxIiwiRGF0YSIsInZhbHVlIiwiX19wcm90b19fIiwicmVzdWx0IiwibG9vcCIsImhhc09iamVjdEV4dGVuZHNPYmplY3RCeUNyZWF0ZU51bGwiLCJzb3VyY2UiLCJrZXkiLCJkZXNjIiwiZGF0YSIsImlzV3JhcCIsIkZBTFNFIiwidW53cmFwIiwiUkFXIiwib3B0aW9ucyIsInZhbCIsIl9EYXRlIiwiYXJncyIsInZhbHVlUmVzdWx0IiwiX01hdGgiLCJhIiwieCIsIl9SZWZsZWN0IiwidGFyZ2V0IiwiX1NldCIsInNldCIsImFyZyIsIm5hbWVzVG9BcnJheSIsIm5hbWVzIiwiZXhhY3RUeXBlIiwiX09iamVjdCIsInNvdXJjZXMiLCJvYmplY3QiLCJmaW5kT2JqZWN0Iiwic3ltYm9sIiwibm90RW51bWVyYWJsZSIsImV4dGVuZCIsImRlc2NzIiwicGFyZW50S2V5cyIsInBpY2siLCJvbWl0IiwiZW1wdHlQaWNrIiwia2V5cyIsIl9Qcm94eSIsInAiLCJyZWNlaXZlciIsImZvcm1JbmZvIiwicmVhY3RpdmUiXSwibWFwcGluZ3MiOiI0SUFBTyxNQUFNQSxFQUFVLE9BQU8sT0FBTyxNQUFNLEVBQzNDLE9BQU8sT0FBT0EsRUFBUyxDQU1yQixpQkFBaUJDLEVBQU8sR0FBSSxDQUMxQixNQUFPLElBQUlBLEVBQUssSUFBTSxJQUFJLFlBQWEsSUFBR0EsRUFBSyxNQUFNLENBQUMsR0FDdkQsRUFNRCxpQkFBaUJBLEVBQU8sR0FBSSxDQUMxQixNQUFPLElBQUlBLEVBQUssSUFBTSxJQUFJLFlBQWEsSUFBR0EsRUFBSyxNQUFNLENBQUMsR0FDdkQsRUFVRCxZQUFZQSxFQUFNLENBQUUsVUFBQUMsRUFBWSxJQUFLLE1BQUFDLEVBQVEsS0FBTyxFQUFHLEdBQUksQ0FFekQsTUFBTUMsRUFBUyxJQUFJLE9BQU8sR0FBR0YsU0FBa0IsR0FBRyxFQUU1Q0csRUFBWUosRUFBSyxXQUFXRyxFQUFRLENBQUNFLEVBQVFDLElBQzFDQSxFQUFHLGFBQ1gsRUFFRCxNQUFJLENBQUMsR0FBTSxXQUFXLEVBQUUsU0FBU0osQ0FBSyxFQUM3QkgsRUFBUSxpQkFBaUJLLENBQVMsRUFFdkMsQ0FBQyxHQUFPLFdBQVcsRUFBRSxTQUFTRixDQUFLLEVBQzlCSCxFQUFRLGlCQUFpQkssQ0FBUyxFQUVwQ0EsQ0FDUixFQU9ELFdBQVdKLEVBQU8sR0FBSSxDQUFFLFVBQUFDLEVBQVksR0FBSyxFQUFHLEdBQUksQ0FDOUMsT0FBT0QsRUFFSixXQUFXLGtCQUFtQixLQUFLQyxLQUFhLEVBRWhELGFBQ0osQ0FDSCxD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
