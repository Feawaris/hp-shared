import{c as T}from"./chunk-index2.js";import{_ as H,j as C,r as v,o as y,c as k,b as l,w as i,J as N,q as f,a as Q,h as j,F as U,x as J,d as R,A}from"./entry-chunk-index.js";async function X(o){const t=document.createElement("textarea");t.value=o,Object.assign(t.style,{position:"fixed",top:0,clipPath:"circle(0)"}),document.body.append(t),t.select();const e=document.execCommand("copy");return t.remove(),e?Promise.resolve():Promise.reject()}const P={async writeText(o){try{return await navigator.clipboard.writeText(o)}catch{return await X(o)}},async readText(){return await navigator.clipboard.readText()}};function B(o){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var a in e)o[a]=e[a]}return o}var Y={read:function(o){return o[0]==='"'&&(o=o.slice(1,-1)),o.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(o){return encodeURIComponent(o).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}};function E(o,t){function e(r,c,n){if(!(typeof document>"u")){n=B({},t,n),typeof n.expires=="number"&&(n.expires=new Date(Date.now()+n.expires*864e5)),n.expires&&(n.expires=n.expires.toUTCString()),r=encodeURIComponent(r).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var s="";for(var d in n)!n[d]||(s+="; "+d,n[d]!==!0&&(s+="="+n[d].split(";")[0]));return document.cookie=r+"="+o.write(c,r)+s}}function a(r){if(!(typeof document>"u"||arguments.length&&!r)){for(var c=document.cookie?document.cookie.split("; "):[],n={},s=0;s<c.length;s++){var d=c[s].split("="),b=d.slice(1).join("=");try{var p=decodeURIComponent(d[0]);if(n[p]=o.read(b,p),r===p)break}catch{}}return r?n[r]:n}}return Object.create({set:e,get:a,remove:function(r,c){e(r,"",B({},c,{expires:-1}))},withAttributes:function(r){return E(this.converter,B({},this.attributes,r))},withConverter:function(r){return E(B({},this.converter,r),this.attributes)}},{attributes:{value:Object.freeze(t)},converter:{value:Object.freeze(o)}})}var O=E(Y,{path:"/"});function x(o,...t){for(const e of t)for(const a in e)o[a]=e[a];return o}class ${constructor(t={}){const{converter:e={},attributes:a={},json:r=!0}=t,c={...t,json:r,attributes:x({},O.attributes,a),converter:x({},O.converter,e)};this.$defaults=c}$defaults;set(t,e,a,r={}){const c="json"in r?r.json:this.$defaults.json;if(a=x({},this.$defaults.attributes,a),c)try{e=JSON.stringify(e)}catch(n){console.warn(n)}return O.set(t,e,a)}get(t,e={}){const a="json"in e?e.json:this.$defaults.json;let r=O.get(t);if(a)try{r=JSON.parse(r)}catch(c){console.warn(c)}return r}remove(t,e){return e=x({},this.$defaults.attributes,e),O.remove(t,e)}create(t={}){const e={...t,attributes:x({},this.$defaults.attributes,t.attributes),converter:x({},this.$defaults.attributes,t.converter)};return new $(e)}}const _=new $({json:!0});function u(o){return new Promise((t,e)=>{o.oncomplete=o.onsuccess=()=>t(o.result),o.onabort=o.onerror=()=>e(o.error)})}function z(o,t){const e=indexedDB.open(o);e.onupgradeneeded=()=>e.result.createObjectStore(t);const a=u(e);return(r,c)=>a.then(n=>c(n.transaction(t,r).objectStore(t)))}let V;function m(){return V||(V=z("keyval-store","keyval")),V}function Z(o,t=m()){return t("readonly",e=>u(e.get(o)))}function ee(o,t,e=m()){return e("readwrite",a=>(a.put(t,o),u(a.transaction)))}function te(o,t=m()){return t("readwrite",e=>(o.forEach(a=>e.put(a[1],a[0])),u(e.transaction)))}function ne(o,t=m()){return t("readonly",e=>Promise.all(o.map(a=>u(e.get(a)))))}function oe(o,t,e=m()){return e("readwrite",a=>new Promise((r,c)=>{a.get(o).onsuccess=function(){try{a.put(t(this.result),o),r(u(a.transaction))}catch(n){c(n)}}}))}function re(o,t=m()){return t("readwrite",e=>(e.delete(o),u(e.transaction)))}function ae(o,t=m()){return t("readwrite",e=>(o.forEach(a=>e.delete(a)),u(e.transaction)))}function se(o=m()){return o("readwrite",t=>(t.clear(),u(t.transaction)))}function M(o,t){return o.openCursor().onsuccess=function(){!this.result||(t(this.result),this.result.continue())},u(o.transaction)}function le(o=m()){return o("readonly",t=>{if(t.getAllKeys)return u(t.getAllKeys());const e=[];return M(t,a=>e.push(a.key)).then(()=>e)})}function ce(o=m()){return o("readonly",t=>{if(t.getAll)return u(t.getAll());const e=[];return M(t,a=>e.push(a.value)).then(()=>e)})}function ie(o=m()){return o("readonly",t=>{if(t.getAll&&t.getAllKeys)return Promise.all([u(t.getAllKeys()),u(t.getAll())]).then(([a,r])=>a.map((c,n)=>[c,r[n]]));const e=[];return o("readonly",a=>M(a,r=>e.push([r.key,r.value])).then(()=>e))})}var h=Object.freeze({__proto__:null,clear:se,createStore:z,del:re,delMany:ae,entries:ie,get:Z,getMany:ne,keys:le,promisifyRequest:u,set:ee,setMany:te,update:oe,values:ce});class D{constructor(t={}){const{from:e,json:a=!0}=t,r={...t,from:e,json:a};Object.assign(this,{$defaults:r,storage:e,setItem:e.setItem.bind(e),getItem:e.getItem.bind(e),removeItem:e.removeItem.bind(e),key:e.key.bind(e),clear:e.clear.bind(e)})}$defaults;storage;setItem;getItem;removeItem;key;clear;get length(){return this.storage.length}has(t){return Object.keys(this.storage).includes(t)}set(t,e,a={}){if("json"in a?a.json:this.$defaults.json){if(e===void 0)return;try{e=JSON.stringify(e)}catch(c){console.warn(c)}}return this.storage.setItem(t,e)}get(t,e={}){const a="json"in e?e.json:this.$defaults.json;if(a&&!this.has(t))return;let r=this.storage.getItem(t);if(a)try{r=JSON.parse(r)}catch(c){console.warn(c)}return r}remove(t){return localStorage.removeItem(t)}create(t={}){const e=Object.assign({},this.$defaults,t);return new D(e)}}const G=new D({from:localStorage}),q=new D({from:sessionStorage}),K=Object.freeze(Object.defineProperty({__proto__:null,Cookie:$,_Storage:D,_localStorage:G,_sessionStorage:q,clipboard:P,cookie:_,idbKeyval:h,jsCookie:O},Symbol.toStringTag,{value:"Module"}));const ue={class:"Storage-root"},de={name:"Storage"},fe=Object.assign(de,{setup(o){function t(){console.group("storage"),console.table(Object.getOwnPropertyDescriptors(K)),console.groupEnd()}const e=C({text:`clipboard_${Date.now()}`,async writeText(){await P.writeText(this.text),N.success("复制成功")},async readText(){try{const n=await P.readText();this.text+=n,N.success("粘贴成功")}catch(n){console.dir(n),N.error(`${n.name} : ${n.message}`)}}}),a=C({data:{cookie:document.cookie},console:T({set(){_.set("simpleData",f);for(const[n,s]of Object.entries(f.toJSON()))_.set(n,s)},get(){console.log("get simpleData : ",_.get("simpleData"));for(const[n,s]of Object.entries(f.toJSON()))console.log(`get ${n} : `,_.get(n))},remove(){_.remove("simpleData");for(const[n,s]of Object.entries(f.toJSON()))_.remove(n)},create(){const n=_.create({json:!1,attributes:{expires:3}});console.log(_,n),n.set("newCookie_simpleData",f),console.log(n.get("newCookie_simpleData"))}})}),r=C({data:{localStorage,sessionStorage},storages:{_localStorage:G,_sessionStorage:q},storageName:"_localStorage",get storage(){return this.storages[this.storageName]},console:T({set(){r.storage.set("simpleData",f);for(const[n,s]of Object.entries(f.toJSONWithUndefined()))r.storage.set(n,s)},get(){console.log("get simpleData : ",r.storage.get("simpleData"));for(const[n,s]of Object.entries(f.toJSONWithUndefined()))console.log(`get ${n} : `,r.storage.get(n))},remove(){r.storage.remove("simpleData");for(const[n,s]of Object.entries(f.toJSONWithUndefined()))r.storage.remove(n)},create(){const n=r.storage.create({json:!1});console.log(r.storage,n),n.set("newStorage_simpleData",f),console.log(n.get("newStorage_simpleData"))}})}),c=C({data:{IDBFactory,IDBOpenDBRequest,IDBDatabase,IDBObjectStore,IDBTransaction,IDBRequest,IDBCursor,IDBCursorWithValue,IDBIndex,IDBKeyRange,IDBVersionChangeEvent},idbKeyvalInfo:T({async set(){await h.set("simpleData",f.toJSONWithUndefined());for(const[n,s]of Object.entries(f.toJSONWithUndefined()))await h.set(n,s)},async get(){console.log("get simpleData : ",await h.get("simpleData"));for(const[n,s]of Object.entries(f.toJSONWithUndefined()))console.log(`get ${n} : `,await h.get(n))},async remove(){h.remove("simpleData");for(const[n,s]of Object.entries(f.toJSONWithUndefined()))await h.remove(n)},async update(){await h.update("counter",n=>(n||0)+1)}})});return(n,s)=>{const d=v("el-button"),b=v("AppValuesTable"),p=v("el-card"),W=v("el-input"),w=v("el-form-item"),I=v("el-form"),F=v("el-option"),L=v("el-select");return y(),k("div",ue,[l(p,{header:"总览"},{default:i(()=>[Q("header",null,[l(d,{onClick:s[0]||(s[0]=g=>t())},{default:i(()=>[j("storage")]),_:1})]),l(b,{value:K})]),_:1}),l(p,{header:"clipboard 剪贴板"},{default:i(()=>[l(I,{"label-width":100},{default:i(()=>[l(w,{label:"输入内容"},{default:i(()=>[l(W,{modelValue:e.text,"onUpdate:modelValue":s[1]||(s[1]=g=>e.text=g),type:"textarea",rows:4},null,8,["modelValue"])]),_:1}),l(w,null,{default:i(()=>[l(d,{type:"primary",onClick:s[2]||(s[2]=g=>e.writeText())},{default:i(()=>[j("复制")]),_:1}),l(d,{type:"primary",onClick:s[3]||(s[3]=g=>e.readText())},{default:i(()=>[j("粘贴")]),_:1})]),_:1})]),_:1})]),_:1}),l(p,{header:"cookie"},{default:i(()=>[l(b,{value:a.data},null,8,["value"]),l(I,{"label-width":100},{default:i(()=>[l(w,{label:"操作"},{default:i(()=>[(y(!0),k(U,null,J(Object.entries(a.console),([g,S])=>(y(),R(d,{onClick:S},{default:i(()=>[j(A(g),1)]),_:2},1032,["onClick"]))),256))]),_:1})]),_:1})]),_:1}),l(p,{header:"storage"},{default:i(()=>[l(b,{value:r.data},null,8,["value"]),l(I,{"label-width":100},{default:i(()=>[l(w,{label:"storage"},{default:i(()=>[l(L,{modelValue:r.storageName,"onUpdate:modelValue":s[4]||(s[4]=g=>r.storageName=g)},{default:i(()=>[l(F,{value:"_localStorage"}),l(F,{value:"_sessionStorage"})]),_:1},8,["modelValue"])]),_:1}),l(w,{label:"操作"},{default:i(()=>[(y(!0),k(U,null,J(Object.entries(r.console),([g,S])=>(y(),R(d,{onClick:S},{default:i(()=>[j(A(g),1)]),_:2},1032,["onClick"]))),256))]),_:1})]),_:1})]),_:1}),l(p,{header:"indexedDB"},{default:i(()=>[l(b,{value:c.data},null,8,["value"]),l(I,{"label-width":100},{default:i(()=>[l(w,{label:"操作"},{default:i(()=>[(y(!0),k(U,null,J(Object.entries(c.idbKeyvalInfo),([g,S])=>(y(),R(d,{onClick:S},{default:i(()=>[j(A(g),1)]),_:2},1032,["onClick"]))),256))]),_:1})]),_:1})]),_:1})])}}}),pe=H(fe,[["__scopeId","data-v-3dc89e0d"]]);export{pe as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
