import{_ as k,d as O,aq as Ge,l as D,s as Ie,g as Be,b as Ne,c as He,y as Ve,z as De,e as j,B as ze,A as qe,ar as je}from"./mermaid.core-DSy5ChKP.js";import{d as Ye}from"./transform-Dgtl54Jv.js";import"./app-c3VcIhAs.js";import"./commonjsHelpers-Cpj98o6Y.js";var pe=function(){var r=k(function(B,l,b,y){for(b=b||{},y=B.length;y--;b[B[y]]=l);return b},"o"),c=[1,3],o=[1,6],m=[1,4],a=[1,5],s=[2,5],u=[1,12],h=[5,7,13,19,21,23,24,26,28,31,37,40,47],g=[7,13,19,21,23,24,26,28,31,37,40],p=[7,12,13,19,21,23,24,26,28,31,37,40],i=[7,13,47],E=[1,42],T=[1,41],d=[7,13,29,32,35,38,47],f=[1,55],_=[1,56],x=[1,57],L=[7,13,32,35,42,47],Y={trace:k(function(){},"trace"),yy:{},symbols_:{error:2,start:3,eol:4,GG:5,document:6,EOF:7,":":8,DIR:9,options:10,body:11,OPT:12,NL:13,line:14,statement:15,commitStatement:16,mergeStatement:17,cherryPickStatement:18,acc_title:19,acc_title_value:20,acc_descr:21,acc_descr_value:22,acc_descr_multiline_value:23,section:24,branchStatement:25,CHECKOUT:26,ref:27,BRANCH:28,ORDER:29,NUM:30,CHERRY_PICK:31,COMMIT_ID:32,STR:33,PARENT_COMMIT:34,COMMIT_TAG:35,EMPTYSTR:36,MERGE:37,COMMIT_TYPE:38,commitType:39,COMMIT:40,commit_arg:41,COMMIT_MSG:42,NORMAL:43,REVERSE:44,HIGHLIGHT:45,ID:46,";":47,$accept:0,$end:1},terminals_:{2:"error",5:"GG",7:"EOF",8:":",9:"DIR",12:"OPT",13:"NL",19:"acc_title",20:"acc_title_value",21:"acc_descr",22:"acc_descr_value",23:"acc_descr_multiline_value",24:"section",26:"CHECKOUT",28:"BRANCH",29:"ORDER",30:"NUM",31:"CHERRY_PICK",32:"COMMIT_ID",33:"STR",34:"PARENT_COMMIT",35:"COMMIT_TAG",36:"EMPTYSTR",37:"MERGE",38:"COMMIT_TYPE",40:"COMMIT",42:"COMMIT_MSG",43:"NORMAL",44:"REVERSE",45:"HIGHLIGHT",46:"ID",47:";"},productions_:[0,[3,2],[3,3],[3,4],[3,5],[6,0],[6,2],[10,2],[10,1],[11,0],[11,2],[14,2],[14,1],[15,1],[15,1],[15,1],[15,2],[15,2],[15,1],[15,1],[15,1],[15,2],[25,2],[25,4],[18,3],[18,5],[18,5],[18,7],[18,7],[18,5],[18,5],[18,5],[18,7],[18,7],[18,7],[18,7],[17,2],[17,4],[17,4],[17,4],[17,6],[17,6],[17,6],[17,6],[17,6],[17,6],[17,8],[17,8],[17,8],[17,8],[17,8],[17,8],[16,2],[16,3],[16,3],[16,5],[16,5],[16,3],[16,5],[16,5],[16,5],[16,5],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,3],[16,5],[16,5],[16,5],[16,5],[16,5],[16,5],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,7],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[41,0],[41,1],[39,1],[39,1],[39,1],[27,1],[27,1],[4,1],[4,1],[4,1]],performAction:k(function(l,b,y,n,w,e,$){var t=e.length-1;switch(w){case 2:return e[t];case 3:return e[t-1];case 4:return n.setDirection(e[t-3]),e[t-1];case 6:n.setOptions(e[t-1]),this.$=e[t];break;case 7:e[t-1]+=e[t],this.$=e[t-1];break;case 9:this.$=[];break;case 10:e[t-1].push(e[t]),this.$=e[t-1];break;case 11:this.$=e[t-1];break;case 16:this.$=e[t].trim(),n.setAccTitle(this.$);break;case 17:case 18:this.$=e[t].trim(),n.setAccDescription(this.$);break;case 19:n.addSection(e[t].substr(8)),this.$=e[t].substr(8);break;case 21:n.checkout(e[t]);break;case 22:n.branch(e[t]);break;case 23:n.branch(e[t-2],e[t]);break;case 24:n.cherryPick(e[t],"",void 0);break;case 25:n.cherryPick(e[t-2],"",void 0,e[t]);break;case 26:n.cherryPick(e[t-2],"",e[t]);break;case 27:n.cherryPick(e[t-4],"",e[t],e[t-2]);break;case 28:n.cherryPick(e[t-4],"",e[t-2],e[t]);break;case 29:n.cherryPick(e[t],"",e[t-2]);break;case 30:n.cherryPick(e[t],"","");break;case 31:n.cherryPick(e[t-2],"","");break;case 32:n.cherryPick(e[t-4],"","",e[t-2]);break;case 33:n.cherryPick(e[t-4],"","",e[t]);break;case 34:n.cherryPick(e[t-2],"",e[t-4],e[t]);break;case 35:n.cherryPick(e[t-2],"","",e[t]);break;case 36:n.merge(e[t],"","","");break;case 37:n.merge(e[t-2],e[t],"","");break;case 38:n.merge(e[t-2],"",e[t],"");break;case 39:n.merge(e[t-2],"","",e[t]);break;case 40:n.merge(e[t-4],e[t],"",e[t-2]);break;case 41:n.merge(e[t-4],"",e[t],e[t-2]);break;case 42:n.merge(e[t-4],"",e[t-2],e[t]);break;case 43:n.merge(e[t-4],e[t-2],e[t],"");break;case 44:n.merge(e[t-4],e[t-2],"",e[t]);break;case 45:n.merge(e[t-4],e[t],e[t-2],"");break;case 46:n.merge(e[t-6],e[t-4],e[t-2],e[t]);break;case 47:n.merge(e[t-6],e[t],e[t-4],e[t-2]);break;case 48:n.merge(e[t-6],e[t-4],e[t],e[t-2]);break;case 49:n.merge(e[t-6],e[t-2],e[t-4],e[t]);break;case 50:n.merge(e[t-6],e[t],e[t-2],e[t-4]);break;case 51:n.merge(e[t-6],e[t-2],e[t],e[t-4]);break;case 52:n.commit(e[t]);break;case 53:n.commit("","",n.commitType.NORMAL,e[t]);break;case 54:n.commit("","",e[t],"");break;case 55:n.commit("","",e[t],e[t-2]);break;case 56:n.commit("","",e[t-2],e[t]);break;case 57:n.commit("",e[t],n.commitType.NORMAL,"");break;case 58:n.commit("",e[t-2],n.commitType.NORMAL,e[t]);break;case 59:n.commit("",e[t],n.commitType.NORMAL,e[t-2]);break;case 60:n.commit("",e[t-2],e[t],"");break;case 61:n.commit("",e[t],e[t-2],"");break;case 62:n.commit("",e[t-4],e[t-2],e[t]);break;case 63:n.commit("",e[t-4],e[t],e[t-2]);break;case 64:n.commit("",e[t-2],e[t-4],e[t]);break;case 65:n.commit("",e[t],e[t-4],e[t-2]);break;case 66:n.commit("",e[t],e[t-2],e[t-4]);break;case 67:n.commit("",e[t-2],e[t],e[t-4]);break;case 68:n.commit(e[t],"",n.commitType.NORMAL,"");break;case 69:n.commit(e[t],"",n.commitType.NORMAL,e[t-2]);break;case 70:n.commit(e[t-2],"",n.commitType.NORMAL,e[t]);break;case 71:n.commit(e[t-2],"",e[t],"");break;case 72:n.commit(e[t],"",e[t-2],"");break;case 73:n.commit(e[t],e[t-2],n.commitType.NORMAL,"");break;case 74:n.commit(e[t-2],e[t],n.commitType.NORMAL,"");break;case 75:n.commit(e[t-4],"",e[t-2],e[t]);break;case 76:n.commit(e[t-4],"",e[t],e[t-2]);break;case 77:n.commit(e[t-2],"",e[t-4],e[t]);break;case 78:n.commit(e[t],"",e[t-4],e[t-2]);break;case 79:n.commit(e[t],"",e[t-2],e[t-4]);break;case 80:n.commit(e[t-2],"",e[t],e[t-4]);break;case 81:n.commit(e[t-4],e[t],e[t-2],"");break;case 82:n.commit(e[t-4],e[t-2],e[t],"");break;case 83:n.commit(e[t-2],e[t],e[t-4],"");break;case 84:n.commit(e[t],e[t-2],e[t-4],"");break;case 85:n.commit(e[t],e[t-4],e[t-2],"");break;case 86:n.commit(e[t-2],e[t-4],e[t],"");break;case 87:n.commit(e[t-4],e[t],n.commitType.NORMAL,e[t-2]);break;case 88:n.commit(e[t-4],e[t-2],n.commitType.NORMAL,e[t]);break;case 89:n.commit(e[t-2],e[t],n.commitType.NORMAL,e[t-4]);break;case 90:n.commit(e[t],e[t-2],n.commitType.NORMAL,e[t-4]);break;case 91:n.commit(e[t],e[t-4],n.commitType.NORMAL,e[t-2]);break;case 92:n.commit(e[t-2],e[t-4],n.commitType.NORMAL,e[t]);break;case 93:n.commit(e[t-6],e[t-4],e[t-2],e[t]);break;case 94:n.commit(e[t-6],e[t-4],e[t],e[t-2]);break;case 95:n.commit(e[t-6],e[t-2],e[t-4],e[t]);break;case 96:n.commit(e[t-6],e[t],e[t-4],e[t-2]);break;case 97:n.commit(e[t-6],e[t-2],e[t],e[t-4]);break;case 98:n.commit(e[t-6],e[t],e[t-2],e[t-4]);break;case 99:n.commit(e[t-4],e[t-6],e[t-2],e[t]);break;case 100:n.commit(e[t-4],e[t-6],e[t],e[t-2]);break;case 101:n.commit(e[t-2],e[t-6],e[t-4],e[t]);break;case 102:n.commit(e[t],e[t-6],e[t-4],e[t-2]);break;case 103:n.commit(e[t-2],e[t-6],e[t],e[t-4]);break;case 104:n.commit(e[t],e[t-6],e[t-2],e[t-4]);break;case 105:n.commit(e[t],e[t-4],e[t-2],e[t-6]);break;case 106:n.commit(e[t-2],e[t-4],e[t],e[t-6]);break;case 107:n.commit(e[t],e[t-2],e[t-4],e[t-6]);break;case 108:n.commit(e[t-2],e[t],e[t-4],e[t-6]);break;case 109:n.commit(e[t-4],e[t-2],e[t],e[t-6]);break;case 110:n.commit(e[t-4],e[t],e[t-2],e[t-6]);break;case 111:n.commit(e[t-2],e[t-4],e[t-6],e[t]);break;case 112:n.commit(e[t],e[t-4],e[t-6],e[t-2]);break;case 113:n.commit(e[t-2],e[t],e[t-6],e[t-4]);break;case 114:n.commit(e[t],e[t-2],e[t-6],e[t-4]);break;case 115:n.commit(e[t-4],e[t-2],e[t-6],e[t]);break;case 116:n.commit(e[t-4],e[t],e[t-6],e[t-2]);break;case 117:this.$="";break;case 118:this.$=e[t];break;case 119:this.$=n.commitType.NORMAL;break;case 120:this.$=n.commitType.REVERSE;break;case 121:this.$=n.commitType.HIGHLIGHT;break}},"anonymous"),table:[{3:1,4:2,5:c,7:o,13:m,47:a},{1:[3]},{3:7,4:2,5:c,7:o,13:m,47:a},{6:8,7:s,8:[1,9],9:[1,10],10:11,13:u},r(h,[2,124]),r(h,[2,125]),r(h,[2,126]),{1:[2,1]},{7:[1,13]},{6:14,7:s,10:11,13:u},{8:[1,15]},r(g,[2,9],{11:16,12:[1,17]}),r(p,[2,8]),{1:[2,2]},{7:[1,18]},{6:19,7:s,10:11,13:u},{7:[2,6],13:[1,22],14:20,15:21,16:23,17:24,18:25,19:[1,26],21:[1,27],23:[1,28],24:[1,29],25:30,26:[1,31],28:[1,35],31:[1,34],37:[1,33],40:[1,32]},r(p,[2,7]),{1:[2,3]},{7:[1,36]},r(g,[2,10]),{4:37,7:o,13:m,47:a},r(g,[2,12]),r(i,[2,13]),r(i,[2,14]),r(i,[2,15]),{20:[1,38]},{22:[1,39]},r(i,[2,18]),r(i,[2,19]),r(i,[2,20]),{27:40,33:E,46:T},r(i,[2,117],{41:43,32:[1,46],33:[1,48],35:[1,44],38:[1,45],42:[1,47]}),{27:49,33:E,46:T},{32:[1,50],35:[1,51]},{27:52,33:E,46:T},{1:[2,4]},r(g,[2,11]),r(i,[2,16]),r(i,[2,17]),r(i,[2,21]),r(d,[2,122]),r(d,[2,123]),r(i,[2,52]),{33:[1,53]},{39:54,43:f,44:_,45:x},{33:[1,58]},{33:[1,59]},r(i,[2,118]),r(i,[2,36],{32:[1,60],35:[1,62],38:[1,61]}),{33:[1,63]},{33:[1,64],36:[1,65]},r(i,[2,22],{29:[1,66]}),r(i,[2,53],{32:[1,68],38:[1,67],42:[1,69]}),r(i,[2,54],{32:[1,71],35:[1,70],42:[1,72]}),r(L,[2,119]),r(L,[2,120]),r(L,[2,121]),r(i,[2,57],{35:[1,73],38:[1,74],42:[1,75]}),r(i,[2,68],{32:[1,78],35:[1,76],38:[1,77]}),{33:[1,79]},{39:80,43:f,44:_,45:x},{33:[1,81]},r(i,[2,24],{34:[1,82],35:[1,83]}),{32:[1,84]},{32:[1,85]},{30:[1,86]},{39:87,43:f,44:_,45:x},{33:[1,88]},{33:[1,89]},{33:[1,90]},{33:[1,91]},{33:[1,92]},{33:[1,93]},{39:94,43:f,44:_,45:x},{33:[1,95]},{33:[1,96]},{39:97,43:f,44:_,45:x},{33:[1,98]},r(i,[2,37],{35:[1,100],38:[1,99]}),r(i,[2,38],{32:[1,102],35:[1,101]}),r(i,[2,39],{32:[1,103],38:[1,104]}),{33:[1,105]},{33:[1,106],36:[1,107]},{33:[1,108]},{33:[1,109]},r(i,[2,23]),r(i,[2,55],{32:[1,110],42:[1,111]}),r(i,[2,59],{38:[1,112],42:[1,113]}),r(i,[2,69],{32:[1,115],38:[1,114]}),r(i,[2,56],{32:[1,116],42:[1,117]}),r(i,[2,61],{35:[1,118],42:[1,119]}),r(i,[2,72],{32:[1,121],35:[1,120]}),r(i,[2,58],{38:[1,122],42:[1,123]}),r(i,[2,60],{35:[1,124],42:[1,125]}),r(i,[2,73],{35:[1,127],38:[1,126]}),r(i,[2,70],{32:[1,129],38:[1,128]}),r(i,[2,71],{32:[1,131],35:[1,130]}),r(i,[2,74],{35:[1,133],38:[1,132]}),{39:134,43:f,44:_,45:x},{33:[1,135]},{33:[1,136]},{33:[1,137]},{33:[1,138]},{39:139,43:f,44:_,45:x},r(i,[2,25],{35:[1,140]}),r(i,[2,26],{34:[1,141]}),r(i,[2,31],{34:[1,142]}),r(i,[2,29],{34:[1,143]}),r(i,[2,30],{34:[1,144]}),{33:[1,145]},{33:[1,146]},{39:147,43:f,44:_,45:x},{33:[1,148]},{39:149,43:f,44:_,45:x},{33:[1,150]},{33:[1,151]},{33:[1,152]},{33:[1,153]},{33:[1,154]},{33:[1,155]},{33:[1,156]},{39:157,43:f,44:_,45:x},{33:[1,158]},{33:[1,159]},{33:[1,160]},{39:161,43:f,44:_,45:x},{33:[1,162]},{39:163,43:f,44:_,45:x},{33:[1,164]},{33:[1,165]},{33:[1,166]},{39:167,43:f,44:_,45:x},{33:[1,168]},r(i,[2,43],{35:[1,169]}),r(i,[2,44],{38:[1,170]}),r(i,[2,42],{32:[1,171]}),r(i,[2,45],{35:[1,172]}),r(i,[2,40],{38:[1,173]}),r(i,[2,41],{32:[1,174]}),{33:[1,175],36:[1,176]},{33:[1,177]},{33:[1,178]},{33:[1,179]},{33:[1,180]},r(i,[2,66],{42:[1,181]}),r(i,[2,79],{32:[1,182]}),r(i,[2,67],{42:[1,183]}),r(i,[2,90],{38:[1,184]}),r(i,[2,80],{32:[1,185]}),r(i,[2,89],{38:[1,186]}),r(i,[2,65],{42:[1,187]}),r(i,[2,78],{32:[1,188]}),r(i,[2,64],{42:[1,189]}),r(i,[2,84],{35:[1,190]}),r(i,[2,77],{32:[1,191]}),r(i,[2,83],{35:[1,192]}),r(i,[2,63],{42:[1,193]}),r(i,[2,91],{38:[1,194]}),r(i,[2,62],{42:[1,195]}),r(i,[2,85],{35:[1,196]}),r(i,[2,86],{35:[1,197]}),r(i,[2,92],{38:[1,198]}),r(i,[2,76],{32:[1,199]}),r(i,[2,87],{38:[1,200]}),r(i,[2,75],{32:[1,201]}),r(i,[2,81],{35:[1,202]}),r(i,[2,82],{35:[1,203]}),r(i,[2,88],{38:[1,204]}),{33:[1,205]},{39:206,43:f,44:_,45:x},{33:[1,207]},{33:[1,208]},{39:209,43:f,44:_,45:x},{33:[1,210]},r(i,[2,27]),r(i,[2,32]),r(i,[2,28]),r(i,[2,33]),r(i,[2,34]),r(i,[2,35]),{33:[1,211]},{33:[1,212]},{33:[1,213]},{39:214,43:f,44:_,45:x},{33:[1,215]},{39:216,43:f,44:_,45:x},{33:[1,217]},{33:[1,218]},{33:[1,219]},{33:[1,220]},{33:[1,221]},{33:[1,222]},{33:[1,223]},{39:224,43:f,44:_,45:x},{33:[1,225]},{33:[1,226]},{33:[1,227]},{39:228,43:f,44:_,45:x},{33:[1,229]},{39:230,43:f,44:_,45:x},{33:[1,231]},{33:[1,232]},{33:[1,233]},{39:234,43:f,44:_,45:x},r(i,[2,46]),r(i,[2,48]),r(i,[2,47]),r(i,[2,49]),r(i,[2,51]),r(i,[2,50]),r(i,[2,107]),r(i,[2,108]),r(i,[2,105]),r(i,[2,106]),r(i,[2,110]),r(i,[2,109]),r(i,[2,114]),r(i,[2,113]),r(i,[2,112]),r(i,[2,111]),r(i,[2,116]),r(i,[2,115]),r(i,[2,104]),r(i,[2,103]),r(i,[2,102]),r(i,[2,101]),r(i,[2,99]),r(i,[2,100]),r(i,[2,98]),r(i,[2,97]),r(i,[2,96]),r(i,[2,95]),r(i,[2,93]),r(i,[2,94])],defaultActions:{7:[2,1],13:[2,2],18:[2,3],36:[2,4]},parseError:k(function(l,b){if(b.recoverable)this.trace(l);else{var y=new Error(l);throw y.hash=b,y}},"parseError"),parse:k(function(l){var b=this,y=[0],n=[],w=[null],e=[],$=this.table,t="",ae=0,de=0,Pe=2,xe=1,Oe=e.slice.call(arguments,1),A=Object.create(this.lexer),U={yy:{}};for(var he in this.yy)Object.prototype.hasOwnProperty.call(this.yy,he)&&(U.yy[he]=this.yy[he]);A.setInput(l,U.yy),U.yy.lexer=A,U.yy.parser=this,typeof A.yylloc>"u"&&(A.yylloc={});var me=A.yylloc;e.push(me);var Ae=A.options&&A.options.ranges;typeof U.yy.parseError=="function"?this.parseError=U.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;function Se(z){y.length=y.length-2*z,w.length=w.length-z,e.length=e.length-z}k(Se,"popStack");function ke(){var z;return z=n.pop()||A.lex()||xe,typeof z!="number"&&(z instanceof Array&&(n=z,z=n.pop()),z=b.symbols_[z]||z),z}k(ke,"lex");for(var V,W,q,ue,X={},ie,F,ye,se;;){if(W=y[y.length-1],this.defaultActions[W]?q=this.defaultActions[W]:((V===null||typeof V>"u")&&(V=ke()),q=$[W]&&$[W][V]),typeof q>"u"||!q.length||!q[0]){var fe="";se=[];for(ie in $[W])this.terminals_[ie]&&ie>Pe&&se.push("'"+this.terminals_[ie]+"'");A.showPosition?fe="Parse error on line "+(ae+1)+`:
`+A.showPosition()+`
Expecting `+se.join(", ")+", got '"+(this.terminals_[V]||V)+"'":fe="Parse error on line "+(ae+1)+": Unexpected "+(V==xe?"end of input":"'"+(this.terminals_[V]||V)+"'"),this.parseError(fe,{text:A.match,token:this.terminals_[V]||V,line:A.yylineno,loc:me,expected:se})}if(q[0]instanceof Array&&q.length>1)throw new Error("Parse Error: multiple actions possible at state: "+W+", token: "+V);switch(q[0]){case 1:y.push(V),w.push(A.yytext),e.push(A.yylloc),y.push(q[1]),V=null,de=A.yyleng,t=A.yytext,ae=A.yylineno,me=A.yylloc;break;case 2:if(F=this.productions_[q[1]][1],X.$=w[w.length-F],X._$={first_line:e[e.length-(F||1)].first_line,last_line:e[e.length-1].last_line,first_column:e[e.length-(F||1)].first_column,last_column:e[e.length-1].last_column},Ae&&(X._$.range=[e[e.length-(F||1)].range[0],e[e.length-1].range[1]]),ue=this.performAction.apply(X,[t,de,ae,U.yy,q[1],w,e].concat(Oe)),typeof ue<"u")return ue;F&&(y=y.slice(0,-1*F*2),w=w.slice(0,-1*F),e=e.slice(0,-1*F)),y.push(this.productions_[q[1]][0]),w.push(X.$),e.push(X._$),ye=$[y[y.length-2]][y[y.length-1]],y.push(ye);break;case 3:return!0}}return!0},"parse")},C=function(){var B={EOF:1,parseError:k(function(b,y){if(this.yy.parser)this.yy.parser.parseError(b,y);else throw new Error(b)},"parseError"),setInput:function(l,b){return this.yy=b||this.yy||{},this._input=l,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var l=this._input[0];this.yytext+=l,this.yyleng++,this.offset++,this.match+=l,this.matched+=l;var b=l.match(/(?:\r\n?|\n).*/g);return b?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),l},unput:function(l){var b=l.length,y=l.split(/(?:\r\n?|\n)/g);this._input=l+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-b),this.offset-=b;var n=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),y.length-1&&(this.yylineno-=y.length-1);var w=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:y?(y.length===n.length?this.yylloc.first_column:0)+n[n.length-y.length].length-y[0].length:this.yylloc.first_column-b},this.options.ranges&&(this.yylloc.range=[w[0],w[0]+this.yyleng-b]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){if(this.options.backtrack_lexer)this._backtrack=!0;else return this.parseError("Lexical error on line "+(this.yylineno+1)+`. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).
`+this.showPosition(),{text:"",token:null,line:this.yylineno});return this},less:function(l){this.unput(this.match.slice(l))},pastInput:function(){var l=this.matched.substr(0,this.matched.length-this.match.length);return(l.length>20?"...":"")+l.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var l=this.match;return l.length<20&&(l+=this._input.substr(0,20-l.length)),(l.substr(0,20)+(l.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var l=this.pastInput(),b=new Array(l.length+1).join("-");return l+this.upcomingInput()+`
`+b+"^"},test_match:function(l,b){var y,n,w;if(this.options.backtrack_lexer&&(w={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(w.yylloc.range=this.yylloc.range.slice(0))),n=l[0].match(/(?:\r\n?|\n).*/g),n&&(this.yylineno+=n.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:n?n[n.length-1].length-n[n.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+l[0].length},this.yytext+=l[0],this.match+=l[0],this.matches=l,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(l[0].length),this.matched+=l[0],y=this.performAction.call(this,this.yy,this,b,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),y)return y;if(this._backtrack){for(var e in w)this[e]=w[e];return!1}return!1},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var l,b,y,n;this._more||(this.yytext="",this.match="");for(var w=this._currentRules(),e=0;e<w.length;e++)if(y=this._input.match(this.rules[w[e]]),y&&(!b||y[0].length>b[0].length)){if(b=y,n=e,this.options.backtrack_lexer){if(l=this.test_match(y,w[e]),l!==!1)return l;if(this._backtrack){b=!1;continue}else return!1}else if(!this.options.flex)break}return b?(l=this.test_match(b,w[n]),l!==!1?l:!1):this._input===""?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+`. Unrecognized text.
`+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:k(function(){var b=this.next();return b||this.lex()},"lex"),begin:k(function(b){this.conditionStack.push(b)},"begin"),popState:k(function(){var b=this.conditionStack.length-1;return b>0?this.conditionStack.pop():this.conditionStack[0]},"popState"),_currentRules:k(function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},"_currentRules"),topState:k(function(b){return b=this.conditionStack.length-1-Math.abs(b||0),b>=0?this.conditionStack[b]:"INITIAL"},"topState"),pushState:k(function(b){this.begin(b)},"pushState"),stateStackSize:k(function(){return this.conditionStack.length},"stateStackSize"),options:{"case-insensitive":!0},performAction:k(function(b,y,n,w){switch(n){case 0:return this.begin("acc_title"),19;case 1:return this.popState(),"acc_title_value";case 2:return this.begin("acc_descr"),21;case 3:return this.popState(),"acc_descr_value";case 4:this.begin("acc_descr_multiline");break;case 5:this.popState();break;case 6:return"acc_descr_multiline_value";case 7:return 13;case 8:break;case 9:break;case 10:return 5;case 11:return 40;case 12:return 32;case 13:return 38;case 14:return 42;case 15:return 43;case 16:return 44;case 17:return 45;case 18:return 35;case 19:return 28;case 20:return 29;case 21:return 37;case 22:return 31;case 23:return 34;case 24:return 26;case 25:return 9;case 26:return 9;case 27:return 9;case 28:return 8;case 29:return"CARET";case 30:this.begin("options");break;case 31:this.popState();break;case 32:return 12;case 33:return 36;case 34:this.begin("string");break;case 35:this.popState();break;case 36:return 33;case 37:return 30;case 38:return 46;case 39:return 7}},"anonymous"),rules:[/^(?:accTitle\s*:\s*)/i,/^(?:(?!\n||)*[^\n]*)/i,/^(?:accDescr\s*:\s*)/i,/^(?:(?!\n||)*[^\n]*)/i,/^(?:accDescr\s*\{\s*)/i,/^(?:[\}])/i,/^(?:[^\}]*)/i,/^(?:(\r?\n)+)/i,/^(?:#[^\n]*)/i,/^(?:%[^\n]*)/i,/^(?:gitGraph\b)/i,/^(?:commit(?=\s|$))/i,/^(?:id:)/i,/^(?:type:)/i,/^(?:msg:)/i,/^(?:NORMAL\b)/i,/^(?:REVERSE\b)/i,/^(?:HIGHLIGHT\b)/i,/^(?:tag:)/i,/^(?:branch(?=\s|$))/i,/^(?:order:)/i,/^(?:merge(?=\s|$))/i,/^(?:cherry-pick(?=\s|$))/i,/^(?:parent:)/i,/^(?:checkout(?=\s|$))/i,/^(?:LR\b)/i,/^(?:TB\b)/i,/^(?:BT\b)/i,/^(?::)/i,/^(?:\^)/i,/^(?:options\r?\n)/i,/^(?:[ \r\n\t]+end\b)/i,/^(?:[\s\S]+(?=[ \r\n\t]+end))/i,/^(?:["]["])/i,/^(?:["])/i,/^(?:["])/i,/^(?:[^"]*)/i,/^(?:[0-9]+(?=\s|$))/i,/^(?:\w([-\./\w]*[-\w])?)/i,/^(?:$)/i,/^(?:\s+)/i],conditions:{acc_descr_multiline:{rules:[5,6],inclusive:!1},acc_descr:{rules:[3],inclusive:!1},acc_title:{rules:[1],inclusive:!1},options:{rules:[31,32],inclusive:!1},string:{rules:[35,36],inclusive:!1},INITIAL:{rules:[0,2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,37,38,39,40],inclusive:!0}}};return B}();Y.lexer=C;function I(){this.yy={}}return k(I,"Parser"),I.prototype=Y,Y.Parser=I,new I}();pe.parser=pe;var Fe=pe,ne=O().gitGraph.mainBranchName,Ke=O().gitGraph.mainBranchOrder,P={},H=null,re={};re[ne]={name:ne,order:Ke};var R={};R[ne]=H;var G=ne,Te="LR",Q=0;function le(){return Ge({length:7})}k(le,"getId");function ve(r,c){const o=Object.create(null);return r.reduce((m,a)=>{const s=c(a);return o[s]||(o[s]=!0,m.push(a)),m},[])}k(ve,"uniqBy");var Ue=k(function(r){Te=r},"setDirection"),Ee={},We=k(function(r){D.debug("options str",r),r=r&&r.trim(),r=r||"{}";try{Ee=JSON.parse(r)}catch(c){D.error("error while parsing gitGraph options",c.message)}},"setOptions"),Je=k(function(){return Ee},"getOptions"),Qe=k(function(r,c,o,m){D.debug("Entering commit:",r,c,o,m),c=j.sanitizeText(c,O()),r=j.sanitizeText(r,O()),m=j.sanitizeText(m,O());const a={id:c||Q+"-"+le(),message:r,seq:Q++,type:o||Z.NORMAL,tag:m||"",parents:H==null?[]:[H.id],branch:G};H=a,P[a.id]=a,R[G]=a.id,D.debug("in pushCommit "+a.id)},"commit"),Xe=k(function(r,c){if(r=j.sanitizeText(r,O()),R[r]===void 0)R[r]=H!=null?H.id:null,re[r]={name:r,order:c?parseInt(c,10):null},we(r),D.debug("in createBranch");else{let o=new Error('Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout '+r+'")');throw o.hash={text:"branch "+r,token:"branch "+r,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"checkout '+r+'"']},o}},"branch"),Ze=k(function(r,c,o,m){r=j.sanitizeText(r,O()),c=j.sanitizeText(c,O());const a=P[R[G]],s=P[R[r]];if(G===r){let h=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw h.hash={text:"merge "+r,token:"merge "+r,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch abc"]},h}else if(a===void 0||!a){let h=new Error('Incorrect usage of "merge". Current branch ('+G+")has no commits");throw h.hash={text:"merge "+r,token:"merge "+r,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["commit"]},h}else if(R[r]===void 0){let h=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw h.hash={text:"merge "+r,token:"merge "+r,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch "+r]},h}else if(s===void 0||!s){let h=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw h.hash={text:"merge "+r,token:"merge "+r,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"commit"']},h}else if(a===s){let h=new Error('Incorrect usage of "merge". Both branches have same head');throw h.hash={text:"merge "+r,token:"merge "+r,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["branch abc"]},h}else if(c&&P[c]!==void 0){let h=new Error('Incorrect usage of "merge". Commit with id:'+c+" already exists, use different custom Id");throw h.hash={text:"merge "+r+c+o+m,token:"merge "+r+c+o+m,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["merge "+r+" "+c+"_UNIQUE "+o+" "+m]},h}const u={id:c||Q+"-"+le(),message:"merged branch "+r+" into "+G,seq:Q++,parents:[H==null?null:H.id,R[r]],branch:G,type:Z.MERGE,customType:o,customId:!!c,tag:m||""};H=u,P[u.id]=u,R[G]=u.id,D.debug(R),D.debug("in mergeBranch")},"merge"),$e=k(function(r,c,o,m){if(D.debug("Entering cherryPick:",r,c,o),r=j.sanitizeText(r,O()),c=j.sanitizeText(c,O()),o=j.sanitizeText(o,O()),m=j.sanitizeText(m,O()),!r||P[r]===void 0){let u=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw u.hash={text:"cherryPick "+r+" "+c,token:"cherryPick "+r+" "+c,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},u}let a=P[r],s=a.branch;if(m&&!(Array.isArray(a.parents)&&a.parents.includes(m)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");if(a.type===Z.MERGE&&!m)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!c||P[c]===void 0){if(s===G){let g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:"cherryPick "+r+" "+c,token:"cherryPick "+r+" "+c,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},g}const u=P[R[G]];if(u===void 0||!u){let g=new Error('Incorrect usage of "cherry-pick". Current branch ('+G+")has no commits");throw g.hash={text:"cherryPick "+r+" "+c,token:"cherryPick "+r+" "+c,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:["cherry-pick abc"]},g}const h={id:Q+"-"+le(),message:"cherry-picked "+a+" into "+G,seq:Q++,parents:[H==null?null:H.id,a.id],branch:G,type:Z.CHERRY_PICK,tag:o??`cherry-pick:${a.id}${a.type===Z.MERGE?`|parent:${m}`:""}`};H=h,P[h.id]=h,R[G]=h.id,D.debug(R),D.debug("in cherryPick")}},"cherryPick"),we=k(function(r){if(r=j.sanitizeText(r,O()),R[r]===void 0){let c=new Error('Trying to checkout branch which is not yet created. (Help try using "branch '+r+'")');throw c.hash={text:"checkout "+r,token:"checkout "+r,line:"1",loc:{first_line:1,last_line:1,first_column:1,last_column:1},expected:['"branch '+r+'"']},c}else{G=r;const c=R[G];H=P[c]}},"checkout");function be(r,c,o){const m=r.indexOf(c);m===-1?r.push(o):r.splice(m,1,o)}k(be,"upsert");function ge(r){const c=r.reduce((a,s)=>a.seq>s.seq?a:s,r[0]);let o="";r.forEach(function(a){a===c?o+="	*":o+="	|"});const m=[o,c.id,c.seq];for(let a in R)R[a]===c.id&&m.push(a);if(D.debug(m.join(" ")),c.parents&&c.parents.length==2){const a=P[c.parents[0]];be(r,c,a),r.push(P[c.parents[1]])}else{if(c.parents.length==0)return;{const a=P[c.parents];be(r,c,a)}}r=ve(r,a=>a.id),ge(r)}k(ge,"prettyPrintCommitHistory");var et=k(function(){D.debug(P);const r=Le()[0];ge([r])},"prettyPrint"),tt=k(function(){P={},H=null;let r=O().gitGraph.mainBranchName,c=O().gitGraph.mainBranchOrder;R={},R[r]=null,re={},re[r]={name:r,order:c},G=r,Q=0,ze()},"clear"),rt=k(function(){return Object.values(re).map((c,o)=>c.order!==null?c:{...c,order:parseFloat(`0.${o}`,10)}).sort((c,o)=>c.order-o.order).map(({name:c})=>({name:c}))},"getBranchesAsObjArray"),at=k(function(){return R},"getBranches"),it=k(function(){return P},"getCommits"),Le=k(function(){const r=Object.keys(P).map(function(c){return P[c]});return r.forEach(function(c){D.debug(c.id)}),r.sort((c,o)=>c.seq-o.seq),r},"getCommitsArray"),st=k(function(){return G},"getCurrentBranch"),nt=k(function(){return Te},"getDirection"),ct=k(function(){return H},"getHead"),Z={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},ot={getConfig:()=>O().gitGraph,setDirection:Ue,setOptions:We,getOptions:Je,commit:Qe,branch:Xe,merge:Ze,cherryPick:$e,checkout:we,prettyPrint:et,clear:tt,getBranchesAsObjArray:rt,getBranches:at,getCommits:it,getCommitsArray:Le,getCurrentBranch:st,getDirection:nt,getHead:ct,setAccTitle:Ie,getAccTitle:Be,getAccDescription:Ne,setAccDescription:He,setDiagramTitle:Ve,getDiagramTitle:De,commitType:Z},ee={},M={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},J=8,S={},N={},ce=[],K=0,v="LR",oe=30,lt=k(()=>{S={},N={},ee={},K=0,ce=[],v="LR"},"clear"),Me=k(r=>{const c=document.createElementNS("http://www.w3.org/2000/svg","text");let o=[];typeof r=="string"?o=r.split(/\\n|\n|<br\s*\/?>/gi):Array.isArray(r)?o=r:o=[];for(const m of o){const a=document.createElementNS("http://www.w3.org/2000/svg","tspan");a.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),a.setAttribute("dy","1em"),a.setAttribute("x","0"),a.setAttribute("class","row"),a.textContent=m.trim(),c.appendChild(a)}return c},"drawText"),Re=k(r=>{let c="",o=0;return r.forEach(m=>{const a=v==="TB"||v==="BT"?N[m].y:N[m].x;a>=o&&(c=m,o=a)}),c||void 0},"findClosestParent"),Ce=k(r=>{let c="",o=1/0;return r.forEach(m=>{const a=N[m].y;a<=o&&(c=m,o=a)}),c||void 0},"findClosestParentBT"),ht=k((r,c,o,m,a)=>{let s=o,u=o,h=[];r.forEach(g=>{const p=c[g];if(p.parents.length){const T=Re(p.parents);s=N[T].y+m,s>=u&&(u=s)}else h.push(p);const i=S[p.branch].pos,E=s+a;N[p.id]={x:i,y:E}}),s=u,h.forEach(g=>{const i=s+o,E=S[g.branch].pos;N[g.id]={x:E,y:i}}),r.forEach(g=>{const p=c[g];if(p.parents.length){const i=Ce(p.parents);s=N[i].y-m,s<=u&&(u=s);const E=S[p.branch].pos,T=s-a;N[p.id]={x:E,y:T}}})},"setParallelBTPos"),_e=k((r,c,o)=>{const m=O().gitGraph,a=r.append("g").attr("class","commit-bullets"),s=r.append("g").attr("class","commit-labels");let u=0;(v==="TB"||v==="BT")&&(u=oe);const h=Object.keys(c),g=m.parallelCommits,p=10,i=40;let E=v!=="BT"||v==="BT"&&g?h.sort((T,d)=>c[T].seq-c[d].seq):h.sort((T,d)=>c[T].seq-c[d].seq).reverse();v==="BT"&&g&&(ht(E,c,u,i,p),E=E.reverse()),E.forEach(T=>{const d=c[T];if(g)if(d.parents.length){const L=v==="BT"?Ce(d.parents):Re(d.parents);v==="TB"?u=N[L].y+i:v==="BT"?u=N[T].y-i:u=N[L].x+i}else v==="TB"?u=oe:v==="BT"?u=N[T].y-i:u=0;const f=v==="BT"&&g?u:u+p,_=v==="TB"||v==="BT"?f:S[d.branch].pos,x=v==="TB"||v==="BT"?S[d.branch].pos:f;if(o){let L,Y=d.customType!==void 0&&d.customType!==""?d.customType:d.type;switch(Y){case M.NORMAL:L="commit-normal";break;case M.REVERSE:L="commit-reverse";break;case M.HIGHLIGHT:L="commit-highlight";break;case M.MERGE:L="commit-merge";break;case M.CHERRY_PICK:L="commit-cherry-pick";break;default:L="commit-normal"}if(Y===M.HIGHLIGHT){const C=a.append("rect");C.attr("x",x-10),C.attr("y",_-10),C.attr("height",20),C.attr("width",20),C.attr("class",`commit ${d.id} commit-highlight${S[d.branch].index%J} ${L}-outer`),a.append("rect").attr("x",x-6).attr("y",_-6).attr("height",12).attr("width",12).attr("class",`commit ${d.id} commit${S[d.branch].index%J} ${L}-inner`)}else if(Y===M.CHERRY_PICK)a.append("circle").attr("cx",x).attr("cy",_).attr("r",10).attr("class",`commit ${d.id} ${L}`),a.append("circle").attr("cx",x-3).attr("cy",_+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${d.id} ${L}`),a.append("circle").attr("cx",x+3).attr("cy",_+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${d.id} ${L}`),a.append("line").attr("x1",x+3).attr("y1",_+1).attr("x2",x).attr("y2",_-5).attr("stroke","#fff").attr("class",`commit ${d.id} ${L}`),a.append("line").attr("x1",x-3).attr("y1",_+1).attr("x2",x).attr("y2",_-5).attr("stroke","#fff").attr("class",`commit ${d.id} ${L}`);else{const C=a.append("circle");if(C.attr("cx",x),C.attr("cy",_),C.attr("r",d.type===M.MERGE?9:10),C.attr("class",`commit ${d.id} commit${S[d.branch].index%J}`),Y===M.MERGE){const I=a.append("circle");I.attr("cx",x),I.attr("cy",_),I.attr("r",6),I.attr("class",`commit ${L} ${d.id} commit${S[d.branch].index%J}`)}Y===M.REVERSE&&a.append("path").attr("d",`M ${x-5},${_-5}L${x+5},${_+5}M${x-5},${_+5}L${x+5},${_-5}`).attr("class",`commit ${L} ${d.id} commit${S[d.branch].index%J}`)}}if(v==="TB"||v==="BT"?N[d.id]={x,y:f}:N[d.id]={x:f,y:_},o){if(d.type!==M.CHERRY_PICK&&(d.customId&&d.type===M.MERGE||d.type!==M.MERGE)&&m.showCommitLabel){const C=s.append("g"),I=C.insert("rect").attr("class","commit-label-bkg"),B=C.append("text").attr("x",u).attr("y",_+25).attr("class","commit-label").text(d.id);let l=B.node().getBBox();if(I.attr("x",f-l.width/2-2).attr("y",_+13.5).attr("width",l.width+2*2).attr("height",l.height+2*2),v==="TB"||v==="BT"?(I.attr("x",x-(l.width+4*4+5)).attr("y",_-12),B.attr("x",x-(l.width+4*4)).attr("y",_+l.height-12)):B.attr("x",f-l.width/2),m.rotateCommitLabel)if(v==="TB"||v==="BT")B.attr("transform","rotate(-45, "+x+", "+_+")"),I.attr("transform","rotate(-45, "+x+", "+_+")");else{let b=-7.5-(l.width+10)/25*9.5,y=10+l.width/25*8.5;C.attr("transform","translate("+b+", "+y+") rotate(-45, "+u+", "+_+")")}}if(d.tag){const C=s.insert("polygon"),I=s.append("circle"),B=s.append("text").attr("y",_-16).attr("class","tag-label").text(d.tag);let l=B.node().getBBox();B.attr("x",f-l.width/2);const b=l.height/2,y=_-19.2;C.attr("class","tag-label-bkg").attr("points",`
          ${u-l.width/2-4/2},${y+2}
          ${u-l.width/2-4/2},${y-2}
          ${f-l.width/2-4},${y-b-2}
          ${f+l.width/2+4},${y-b-2}
          ${f+l.width/2+4},${y+b+2}
          ${f-l.width/2-4},${y+b+2}`),I.attr("cx",u-l.width/2+4/2).attr("cy",y).attr("r",1.5).attr("class","tag-hole"),(v==="TB"||v==="BT")&&(C.attr("class","tag-label-bkg").attr("points",`
            ${x},${u+2}
            ${x},${u-2}
            ${x+p},${u-b-2}
            ${x+p+l.width+4},${u-b-2}
            ${x+p+l.width+4},${u+b+2}
            ${x+p},${u+b+2}`).attr("transform","translate(12,12) rotate(45, "+x+","+u+")"),I.attr("cx",x+4/2).attr("cy",u).attr("transform","translate(12,12) rotate(45, "+x+","+u+")"),B.attr("x",x+5).attr("y",u+3).attr("transform","translate(14,14) rotate(45, "+x+","+u+")"))}}u=v==="BT"&&g?u+i:u+i+p,u>K&&(K=u)})},"drawCommits"),mt=k((r,c,o,m,a)=>{const u=(v==="TB"||v==="BT"?o.x<m.x:o.y<m.y)?c.branch:r.branch,h=k(p=>p.branch===u,"isOnBranchToGetCurve"),g=k(p=>p.seq>r.seq&&p.seq<c.seq,"isBetweenCommits");return Object.values(a).some(p=>g(p)&&h(p))},"shouldRerouteArrow"),te=k((r,c,o=0)=>{const m=r+Math.abs(r-c)/2;if(o>5)return m;if(ce.every(u=>Math.abs(u-m)>=10))return ce.push(m),m;const s=Math.abs(r-c);return te(r,c-s/5,o+1)},"findLane"),ut=k((r,c,o,m)=>{const a=N[c.id],s=N[o.id],u=mt(c,o,a,s,m);let h="",g="",p=0,i=0,E=S[o.branch].index;o.type===M.MERGE&&c.id!==o.parents[0]&&(E=S[c.branch].index);let T;if(u){h="A 10 10, 0, 0, 0,",g="A 10 10, 0, 0, 1,",p=10,i=10;const d=a.y<s.y?te(a.y,s.y):te(s.y,a.y),f=a.x<s.x?te(a.x,s.x):te(s.x,a.x);v==="TB"?a.x<s.x?T=`M ${a.x} ${a.y} L ${f-p} ${a.y} ${g} ${f} ${a.y+i} L ${f} ${s.y-p} ${h} ${f+i} ${s.y} L ${s.x} ${s.y}`:(E=S[c.branch].index,T=`M ${a.x} ${a.y} L ${f+p} ${a.y} ${h} ${f} ${a.y+i} L ${f} ${s.y-p} ${g} ${f-i} ${s.y} L ${s.x} ${s.y}`):v==="BT"?a.x<s.x?T=`M ${a.x} ${a.y} L ${f-p} ${a.y} ${h} ${f} ${a.y-i} L ${f} ${s.y+p} ${g} ${f+i} ${s.y} L ${s.x} ${s.y}`:(E=S[c.branch].index,T=`M ${a.x} ${a.y} L ${f+p} ${a.y} ${g} ${f} ${a.y-i} L ${f} ${s.y+p} ${h} ${f-i} ${s.y} L ${s.x} ${s.y}`):a.y<s.y?T=`M ${a.x} ${a.y} L ${a.x} ${d-p} ${h} ${a.x+i} ${d} L ${s.x-p} ${d} ${g} ${s.x} ${d+i} L ${s.x} ${s.y}`:(E=S[c.branch].index,T=`M ${a.x} ${a.y} L ${a.x} ${d+p} ${g} ${a.x+i} ${d} L ${s.x-p} ${d} ${h} ${s.x} ${d-i} L ${s.x} ${s.y}`)}else h="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,i=20,v==="TB"?(a.x<s.x&&(o.type===M.MERGE&&c.id!==o.parents[0]?T=`M ${a.x} ${a.y} L ${a.x} ${s.y-p} ${h} ${a.x+i} ${s.y} L ${s.x} ${s.y}`:T=`M ${a.x} ${a.y} L ${s.x-p} ${a.y} ${g} ${s.x} ${a.y+i} L ${s.x} ${s.y}`),a.x>s.x&&(h="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,i=20,o.type===M.MERGE&&c.id!==o.parents[0]?T=`M ${a.x} ${a.y} L ${a.x} ${s.y-p} ${g} ${a.x-i} ${s.y} L ${s.x} ${s.y}`:T=`M ${a.x} ${a.y} L ${s.x+p} ${a.y} ${h} ${s.x} ${a.y+i} L ${s.x} ${s.y}`),a.x===s.x&&(T=`M ${a.x} ${a.y} L ${s.x} ${s.y}`)):v==="BT"?(a.x<s.x&&(o.type===M.MERGE&&c.id!==o.parents[0]?T=`M ${a.x} ${a.y} L ${a.x} ${s.y+p} ${g} ${a.x+i} ${s.y} L ${s.x} ${s.y}`:T=`M ${a.x} ${a.y} L ${s.x-p} ${a.y} ${h} ${s.x} ${a.y-i} L ${s.x} ${s.y}`),a.x>s.x&&(h="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,i=20,o.type===M.MERGE&&c.id!==o.parents[0]?T=`M ${a.x} ${a.y} L ${a.x} ${s.y+p} ${h} ${a.x-i} ${s.y} L ${s.x} ${s.y}`:T=`M ${a.x} ${a.y} L ${s.x-p} ${a.y} ${h} ${s.x} ${a.y-i} L ${s.x} ${s.y}`),a.x===s.x&&(T=`M ${a.x} ${a.y} L ${s.x} ${s.y}`)):(a.y<s.y&&(o.type===M.MERGE&&c.id!==o.parents[0]?T=`M ${a.x} ${a.y} L ${s.x-p} ${a.y} ${g} ${s.x} ${a.y+i} L ${s.x} ${s.y}`:T=`M ${a.x} ${a.y} L ${a.x} ${s.y-p} ${h} ${a.x+i} ${s.y} L ${s.x} ${s.y}`),a.y>s.y&&(o.type===M.MERGE&&c.id!==o.parents[0]?T=`M ${a.x} ${a.y} L ${s.x-p} ${a.y} ${h} ${s.x} ${a.y-i} L ${s.x} ${s.y}`:T=`M ${a.x} ${a.y} L ${a.x} ${s.y+p} ${g} ${a.x+i} ${s.y} L ${s.x} ${s.y}`),a.y===s.y&&(T=`M ${a.x} ${a.y} L ${s.x} ${s.y}`));r.append("path").attr("d",T).attr("class","arrow arrow"+E%J)},"drawArrow"),ft=k((r,c)=>{const o=r.append("g").attr("class","commit-arrows");Object.keys(c).forEach(m=>{const a=c[m];a.parents&&a.parents.length>0&&a.parents.forEach(s=>{ut(o,c[s],a,c)})})},"drawArrows"),pt=k((r,c)=>{const o=O().gitGraph,m=r.append("g");c.forEach((a,s)=>{const u=s%J,h=S[a.name].pos,g=m.append("line");g.attr("x1",0),g.attr("y1",h),g.attr("x2",K),g.attr("y2",h),g.attr("class","branch branch"+u),v==="TB"?(g.attr("y1",oe),g.attr("x1",h),g.attr("y2",K),g.attr("x2",h)):v==="BT"&&(g.attr("y1",K),g.attr("x1",h),g.attr("y2",oe),g.attr("x2",h)),ce.push(h);let p=a.name;const i=Me(p),E=m.insert("rect"),d=m.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+u);d.node().appendChild(i);let f=i.getBBox();E.attr("class","branchLabelBkg label"+u).attr("rx",4).attr("ry",4).attr("x",-f.width-4-(o.rotateCommitLabel===!0?30:0)).attr("y",-f.height/2+8).attr("width",f.width+18).attr("height",f.height+4),d.attr("transform","translate("+(-f.width-14-(o.rotateCommitLabel===!0?30:0))+", "+(h-f.height/2-1)+")"),v==="TB"?(E.attr("x",h-f.width/2-10).attr("y",0),d.attr("transform","translate("+(h-f.width/2-5)+", 0)")):v==="BT"?(E.attr("x",h-f.width/2-10).attr("y",K),d.attr("transform","translate("+(h-f.width/2-5)+", "+K+")")):E.attr("transform","translate(-19, "+(h-f.height/2)+")")})},"drawBranches"),bt=k(function(r,c,o,m){lt();const a=O(),s=a.gitGraph;D.debug("in gitgraph renderer",r+`
`,"id:",c,o),ee=m.db.getCommits();const u=m.db.getBranchesAsObjArray();v=m.db.getDirection();const h=Ye(`[id="${c}"]`);let g=0;u.forEach((p,i)=>{const E=Me(p.name),T=h.append("g"),d=T.insert("g").attr("class","branchLabel"),f=d.insert("g").attr("class","label branch-label");f.node().appendChild(E);let _=E.getBBox();S[p.name]={pos:g,index:i},g+=50+(s.rotateCommitLabel?40:0)+(v==="TB"||v==="BT"?_.width/2:0),f.remove(),d.remove(),T.remove()}),_e(h,ee,!1),s.showBranches&&pt(h,u),ft(h,ee),_e(h,ee,!0),qe.insertTitle(h,"gitTitleText",s.titleTopMargin,m.db.getDiagramTitle()),je(void 0,h,s.diagramPadding,s.useMaxWidth??a.useMaxWidth)},"draw"),gt={draw:bt},dt=k(r=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(c=>`
        .branch-label${c} { fill: ${r["gitBranchLabel"+c]}; }
        .commit${c} { stroke: ${r["git"+c]}; fill: ${r["git"+c]}; }
        .commit-highlight${c} { stroke: ${r["gitInv"+c]}; fill: ${r["gitInv"+c]}; }
        .label${c}  { fill: ${r["git"+c]}; }
        .arrow${c} { stroke: ${r["git"+c]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${r.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelColor};}
  .commit-label-bkg { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${r.tagLabelFontSize}; fill: ${r.tagLabelColor};}
  .tag-label-bkg { fill: ${r.tagLabelBackground}; stroke: ${r.tagLabelBorder}; }
  .tag-hole { fill: ${r.textColor}; }

  .commit-merge {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }
  .commit-reverse {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${r.primaryColor};
    fill: ${r.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${r.textColor};
  }
`,"getStyles"),xt=dt,vt={parser:Fe,db:ot,renderer:gt,styles:xt};export{vt as diagram};
